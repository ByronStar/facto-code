{
  "TriggerEffectItemType": {
    "name": "TriggerEffectItemType",
    "doc": "Used by TriggerEffectItem.",
    "attrs": {
      "damage": {
        "name": "damage"
      },
      "create-entity": {
        "name": "create-entity"
      },
      "create-explosion": {
        "name": "create-explosion"
      },
      "create-fire": {
        "name": "create-fire"
      },
      "create-smoke": {
        "name": "create-smoke"
      },
      "create-trivial-smoke": {
        "name": "create-trivial-smoke"
      },
      "create-particle": {
        "name": "create-particle"
      },
      "create-sticker": {
        "name": "create-sticker"
      },
      "create-decorative": {
        "name": "create-decorative"
      },
      "nested-result": {
        "name": "nested-result"
      },
      "play-sound": {
        "name": "play-sound"
      },
      "push-back": {
        "name": "push-back"
      },
      "destroy-cliffs": {
        "name": "destroy-cliffs"
      },
      "show-explosion-on-chart": {
        "name": "show-explosion-on-chart"
      },
      "insert-item": {
        "name": "insert-item"
      },
      "script": {
        "name": "script"
      },
      "set-tile": {
        "name": "set-tile"
      },
      "invoke-tile-trigger": {
        "name": "invoke-tile-trigger"
      },
      "destroy-decoratives": {
        "name": "destroy-decoratives"
      },
      "camera-effect": {
        "name": "camera-effect"
      }
    },
    "type": "union"
  },
  "TriggerEffectItem": {
    "name": "TriggerEffectItem",
    "doc": "",
    "attrs": {
      "type": {
        "name": "type",
        "type": "TriggerEffectItemType"
      },
      "repeat_count": {
        "name": "repeat_count",
        "type": "uint16"
      },
      "repeat_count_deviation": {
        "name": "repeat_count_deviation",
        "type": "uint16"
      },
      "probability": {
        "name": "probability",
        "type": "float"
      },
      "affects_target": {
        "name": "affects_target",
        "type": "boolean"
      },
      "show_in_tooltip": {
        "name": "show_in_tooltip",
        "type": "boolean"
      },
      "damage_type_filters": {
        "name": "damage_type_filters",
        "type": "DamageTypeFilters"
      }
    },
    "type": "table"
  },
  "TriggerItem": {
    "name": "TriggerItem",
    "doc": "The trigger will only affect entities that contain any of these flags.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"direct\" or \"area\" or \"line\" or \"cluster\""
      },
      "action_delivery": {
        "name": "action_delivery",
        "type": "array[TriggerDelivery]"
      },
      "entity_flags": {
        "name": "entity_flags",
        "type": "EntityPrototypeFlags",
        "doc": "The trigger will only affect entities that contain any of these flags."
      },
      "ignore_collision_condition": {
        "name": "ignore_collision_condition",
        "type": "boolean"
      },
      "collision_mask": {
        "name": "collision_mask",
        "type": "CollisionMask",
        "doc": "The trigger will only affect entities that would collide with given collision mask."
      },
      "trigger_target_mask": {
        "name": "trigger_target_mask",
        "type": "TriggerTargetMask"
      },
      "force": {
        "name": "force",
        "type": "ForceCondition",
        "doc": "If \"enemy\", the trigger will only affect entities whose force is different from the attacker's and for which there is no cease-fire set. \"ally\" is the opposite of \"enemy\"."
      },
      "repeat_count": {
        "name": "repeat_count",
        "type": "uint"
      },
      "probability": {
        "name": "probability",
        "type": "float"
      }
    },
    "type": "table"
  },
  "TriggerDelivery": {
    "name": "TriggerDelivery",
    "doc": "",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"instant\" or \"projectile\" or \"flame-thrower\" or \"beam\" or \"stream\" or \"artillery\""
      },
      "source_effects": {
        "name": "source_effects",
        "type": "array[TriggerEffectItem]"
      },
      "target_effects": {
        "name": "target_effects",
        "type": "array[TriggerEffectItem]"
      }
    },
    "type": "table"
  },
  "DamageTypeFilters": {
    "name": "DamageTypeFilters",
    "doc": "Whether this is a whitelist or a blacklist of damage types. true means whitelist.",
    "attrs": {
      "whitelist": {
        "name": "whitelist",
        "type": "boolean",
        "doc": "Whether this is a whitelist or a blacklist of damage types. true means whitelist."
      },
      "types": {
        "name": "types",
        "type": "dictionary[string → true]",
        "doc": "The damage types to filter for. The value in the dictionary is meaningless and exists just to allow for easy lookup."
      }
    },
    "type": "table"
  },
  "TextAlign": {
    "name": "TextAlign",
    "doc": "The text is aligned so that the target position is at the given side of the text.",
    "attrs": {
      "left": {
        "name": "left"
      },
      "right": {
        "name": "right"
      },
      "center": {
        "name": "center"
      }
    },
    "type": "union"
  },
  "VerticalTextAlign": {
    "name": "VerticalTextAlign",
    "doc": "The text is aligned so that the target position is at the given side of the text.",
    "attrs": {
      "top": {
        "name": "top"
      },
      "middle": {
        "name": "middle"
      },
      "baseline": {
        "name": "baseline"
      },
      "bottom": {
        "name": "bottom"
      }
    },
    "type": "union"
  },
  "GuiArrowSpecification": {
    "name": "GuiArrowSpecification",
    "doc": "Used for specifying where a GUI arrow should point to.",
    "attrs": {
      "margin": {
        "name": "margin",
        "type": "uint"
      },
      "type": {
        "name": "type",
        "type": "GuiArrowType",
        "doc": "This determines which of the following fields will be required."
      },
      "entity": {
        "name": "entity",
        "type": "LuaEntity"
      },
      "position": {
        "name": "position",
        "type": "MapPosition"
      },
      "crafting_queueindex": {
        "name": "crafting_queueindex",
        "type": "uint",
        "doc": "Index in the crafting queue to point to."
      },
      "inventory_index": {
        "name": "inventory_index",
        "type": "defines.inventory",
        "doc": "Which inventory the stack is in."
      },
      "item_stack_index": {
        "name": "item_stack_index",
        "type": "uint",
        "doc": "Which stack to point to."
      },
      "source": {
        "name": "source",
        "type": "\"player\" or \"target\" or \"player-quickbar\" or \"player-equipment-bar\""
      }
    },
    "type": "table"
  },
  "PrintSettings": {
    "name": "PrintSettings",
    "doc": "Color of the message to print. Defaults to white.",
    "attrs": {
      "color": {
        "name": "color",
        "type": "Color",
        "doc": "Color of the message to print. Defaults to white."
      },
      "sound": {
        "name": "sound",
        "type": "defines.print_sound",
        "doc": "If a sound should be emitted for this message. Defaults to defines.print_sound.use_player_settings."
      },
      "skip": {
        "name": "skip",
        "type": "defines.print_skip",
        "doc": "Condition when to skip adding message. Defaults to defines.print_skip.if_redundant."
      },
      "sound_path": {
        "name": "sound_path",
        "type": "SoundPath",
        "doc": "The sound to play. If not given, UtilitySounds::console_message will be used instead."
      },
      "volume_modifier": {
        "name": "volume_modifier",
        "type": "double",
        "doc": "The volume of the sound to play. Must be between 0 and 1 inclusive. Defaults to 1."
      },
      "game_state": {
        "name": "game_state",
        "type": "boolean",
        "doc": "If set to false, message will not be part of game state and will dissapear from output console after save-load. Defaults to true."
      }
    },
    "type": "table"
  },
  "PrototypeFilterMode": {
    "name": "PrototypeFilterMode",
    "doc": "One of the following values:",
    "attrs": {
      "none": {
        "name": "none"
      },
      "whitelist": {
        "name": "whitelist"
      },
      "blacklist": {
        "name": "blacklist"
      }
    },
    "type": "union"
  },
  "RailEnd": {
    "name": "RailEnd",
    "doc": "",
    "attrs": {
      "rail": {
        "name": "rail",
        "type": "LuaEntity"
      },
      "direction": {
        "name": "direction",
        "type": "defines.rail_direction"
      }
    },
    "type": "table"
  },
  "TrainStopGoal": {
    "name": "TrainStopGoal",
    "doc": "Train stop target. Must be connected to rail (LuaEntity::connected_rail returns valid LuaEntity).",
    "attrs": {
      "train_stop": {
        "name": "train_stop",
        "type": "LuaEntity",
        "doc": "Train stop target. Must be connected to rail (LuaEntity::connected_rail returns valid LuaEntity)."
      }
    },
    "type": "table"
  },
  "TrainPathRequestType": {
    "name": "TrainPathRequestType",
    "doc": "A string specifying the type of request for LuaGameScript::request_train_path.",
    "attrs": {
      "path": {
        "name": "path",
        "doc": "The method will return TrainPathFinderPathResult."
      },
      "any-goal-accessible": {
        "name": "any-goal-accessible",
        "doc": "The method will return TrainPathAnyGoalResult."
      },
      "all-goals-accessible": {
        "name": "all-goals-accessible",
        "doc": "The method will return TrainPathAllGoalsResult."
      },
      "all-goals-penalties": {
        "name": "all-goals-penalties",
        "doc": "The method will return TrainPathAllGoalsResult with penalties."
      }
    },
    "type": "union"
  },
  "TrainPathFinderPathResult": {
    "name": "TrainPathFinderPathResult",
    "doc": "True if found path.",
    "attrs": {
      "found_path": {
        "name": "found_path",
        "type": "boolean",
        "doc": "True if found path."
      },
      "path": {
        "name": "path",
        "type": "array[LuaEntity]",
        "doc": "Only returned if return_path was set to true and path was found. Contains all rails in order that are part of the found path."
      },
      "goal_index": {
        "name": "goal_index",
        "type": "uint",
        "doc": "If path was found, provides index of the specific goal to which the path goes to."
      },
      "penalty": {
        "name": "penalty",
        "type": "double",
        "doc": "Penalty of the path to goal if path was found."
      },
      "total_length": {
        "name": "total_length",
        "type": "double",
        "doc": "If path was found, provides total length of all rails of the path."
      },
      "is_front": {
        "name": "is_front",
        "type": "boolean",
        "doc": "If path was found, tells if the path was reached from the from_front or train's front end."
      },
      "steps_count": {
        "name": "steps_count",
        "type": "uint",
        "doc": "Amount of steps pathfinder performed. This is a measure of how expensive this search was."
      }
    },
    "type": "table"
  },
  "TrainPathAnyGoalResult": {
    "name": "TrainPathAnyGoalResult",
    "doc": "True if any goal was accessible.",
    "attrs": {
      "found_path": {
        "name": "found_path",
        "type": "boolean",
        "doc": "True if any goal was accessible."
      },
      "goal_index": {
        "name": "goal_index",
        "type": "uint",
        "doc": "If any goal was accessible, this gives index of the particular goal that was found."
      },
      "penalty": {
        "name": "penalty",
        "type": "double",
        "doc": "Penalty of the path to goal if a goal was accessible."
      },
      "steps_count": {
        "name": "steps_count",
        "type": "uint",
        "doc": "Amount of steps pathfinder performed. This is a measure of how expensive this search was."
      }
    },
    "type": "table"
  },
  "TrainPathAllGoalsResult": {
    "name": "TrainPathAllGoalsResult",
    "doc": "Amount of goals that are accessible.",
    "attrs": {
      "amount_accessible": {
        "name": "amount_accessible",
        "type": "uint",
        "doc": "Amount of goals that are accessible."
      },
      "accessible": {
        "name": "accessible",
        "type": "array[boolean]",
        "doc": "Array of the same length as requested goals: each field will tell if related goal is accessible for the train."
      },
      "penalties": {
        "name": "penalties",
        "type": "array[double]",
        "doc": "Array of the same length as requested goals. Only present if request type was \"all-goals-penalties\"."
      },
      "steps_count": {
        "name": "steps_count",
        "type": "uint",
        "doc": "Amount of steps pathfinder performed. This is a measure of how expensive this search was."
      }
    },
    "type": "table"
  },
  "ElemID": {
    "name": "ElemID",
    "doc": "Name of a prototype as defined by type.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "ElemType"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Name of a prototype as defined by type."
      }
    },
    "type": "table"
  },
  "SwitchState": {
    "name": "SwitchState",
    "doc": "State of a GUI switch.",
    "attrs": {
      "left": {
        "name": "left"
      },
      "right": {
        "name": "right"
      },
      "none": {
        "name": "none"
      }
    },
    "type": "union"
  },
  "ElemType": {
    "name": "ElemType",
    "doc": "A string specifying a type for choose elem buttons. It's also used by ElemID for LuaGuiElement::elem_tooltip.",
    "attrs": {
      "achievement": {
        "name": "achievement"
      },
      "decorative": {
        "name": "decorative"
      },
      "entity": {
        "name": "entity"
      },
      "equipment": {
        "name": "equipment"
      },
      "fluid": {
        "name": "fluid"
      },
      "item": {
        "name": "item"
      },
      "item-group": {
        "name": "item-group"
      },
      "recipe": {
        "name": "recipe"
      },
      "signal": {
        "name": "signal"
      },
      "technology": {
        "name": "technology"
      },
      "tile": {
        "name": "tile"
      }
    },
    "type": "union"
  },
  "CursorBoxRenderType": {
    "name": "CursorBoxRenderType",
    "doc": "One of the following values:",
    "attrs": {
      "entity": {
        "name": "entity",
        "doc": "The normal entity selection box. Yellow by default."
      },
      "electricity": {
        "name": "electricity",
        "doc": "The selection box used to specify electric poles an entity is connected to. Light blue by default."
      },
      "copy": {
        "name": "copy",
        "doc": "The selection box used when doing entity copy-paste. Green by default."
      },
      "not-allowed": {
        "name": "not-allowed",
        "doc": "The selection box used when specifying colliding entities. Red by default."
      },
      "pair": {
        "name": "pair",
        "doc": "Light blue by default."
      },
      "logistics": {
        "name": "logistics",
        "doc": "Light blue by default."
      },
      "train-visualization": {
        "name": "train-visualization",
        "doc": "White by default."
      },
      "blueprint-snap-rectangle": {
        "name": "blueprint-snap-rectangle",
        "doc": "Green by default."
      }
    },
    "type": "union"
  },
  "MapViewSettings": {
    "name": "MapViewSettings",
    "doc": "What is shown in the map view. If a field is not given, that setting will not be changed.",
    "attrs": {
      "show-logistic-network": {
        "name": "show-logistic-network",
        "type": "boolean"
      },
      "show-electric-network": {
        "name": "show-electric-network",
        "type": "boolean"
      },
      "show-turret-range": {
        "name": "show-turret-range",
        "type": "boolean"
      },
      "show-pollution": {
        "name": "show-pollution",
        "type": "boolean"
      },
      "show-networkless-logistic-members": {
        "name": "show-networkless-logistic-members",
        "type": "boolean"
      },
      "show-train-station-names": {
        "name": "show-train-station-names",
        "type": "boolean"
      },
      "show-player-names": {
        "name": "show-player-names",
        "type": "boolean"
      },
      "show-tags": {
        "name": "show-tags",
        "type": "boolean"
      },
      "show-worker-robots": {
        "name": "show-worker-robots",
        "type": "boolean"
      },
      "show-rail-signal-states": {
        "name": "show-rail-signal-states",
        "type": "boolean"
      },
      "show-recipe-icons": {
        "name": "show-recipe-icons",
        "type": "boolean"
      },
      "show-non-standard-map-info": {
        "name": "show-non-standard-map-info",
        "type": "boolean"
      }
    },
    "type": "table"
  },
  "RadiusVisualisationSpecification": {
    "name": "RadiusVisualisationSpecification",
    "doc": "",
    "attrs": {
      "distance": {
        "name": "distance",
        "type": "double"
      },
      "offset": {
        "name": "offset",
        "type": "Vector"
      },
      "draw_in_cursor": {
        "name": "draw_in_cursor",
        "type": "boolean"
      },
      "draw_on_selection": {
        "name": "draw_on_selection",
        "type": "boolean"
      }
    },
    "type": "table"
  },
  "CliffOrientation": {
    "name": "CliffOrientation",
    "doc": "",
    "attrs": {
      "west-to-east": {
        "name": "west-to-east"
      },
      "north-to-south": {
        "name": "north-to-south"
      },
      "east-to-west": {
        "name": "east-to-west"
      },
      "south-to-north": {
        "name": "south-to-north"
      },
      "west-to-north": {
        "name": "west-to-north"
      },
      "north-to-east": {
        "name": "north-to-east"
      },
      "east-to-south": {
        "name": "east-to-south"
      },
      "south-to-west": {
        "name": "south-to-west"
      },
      "west-to-south": {
        "name": "west-to-south"
      },
      "north-to-west": {
        "name": "north-to-west"
      },
      "east-to-north": {
        "name": "east-to-north"
      },
      "south-to-east": {
        "name": "south-to-east"
      },
      "west-to-none": {
        "name": "west-to-none"
      },
      "none-to-east": {
        "name": "none-to-east"
      },
      "east-to-none": {
        "name": "east-to-none"
      },
      "none-to-west": {
        "name": "none-to-west"
      },
      "north-to-none": {
        "name": "north-to-none"
      },
      "none-to-south": {
        "name": "none-to-south"
      },
      "south-to-none": {
        "name": "south-to-none"
      },
      "none-to-north": {
        "name": "none-to-north"
      }
    },
    "type": "union"
  },
  "ModifierType": {
    "name": "ModifierType",
    "doc": "Used by TechnologyModifier.",
    "attrs": {
      "inserter-stack-size-bonus": {
        "name": "inserter-stack-size-bonus"
      },
      "stack-inserter-capacity-bonus": {
        "name": "stack-inserter-capacity-bonus"
      },
      "laboratory-speed": {
        "name": "laboratory-speed"
      },
      "character-logistic-trash-slots": {
        "name": "character-logistic-trash-slots"
      },
      "maximum-following-robots-count": {
        "name": "maximum-following-robots-count"
      },
      "worker-robot-speed": {
        "name": "worker-robot-speed"
      },
      "worker-robot-storage": {
        "name": "worker-robot-storage"
      },
      "ghost-time-to-live": {
        "name": "ghost-time-to-live"
      },
      "turret-attack": {
        "name": "turret-attack"
      },
      "ammo-damage": {
        "name": "ammo-damage"
      },
      "give-item": {
        "name": "give-item"
      },
      "gun-speed": {
        "name": "gun-speed"
      },
      "unlock-recipe": {
        "name": "unlock-recipe"
      },
      "character-crafting-speed": {
        "name": "character-crafting-speed"
      },
      "character-mining-speed": {
        "name": "character-mining-speed"
      },
      "character-running-speed": {
        "name": "character-running-speed"
      },
      "character-build-distance": {
        "name": "character-build-distance"
      },
      "character-item-drop-distance": {
        "name": "character-item-drop-distance"
      },
      "character-reach-distance": {
        "name": "character-reach-distance"
      },
      "character-resource-reach-distance": {
        "name": "character-resource-reach-distance"
      },
      "character-item-pickup-distance": {
        "name": "character-item-pickup-distance"
      },
      "character-loot-pickup-distance": {
        "name": "character-loot-pickup-distance"
      },
      "character-inventory-slots-bonus": {
        "name": "character-inventory-slots-bonus"
      },
      "deconstruction-time-to-live": {
        "name": "deconstruction-time-to-live"
      },
      "max-failed-attempts-per-tick-per-construction-queue": {
        "name": "max-failed-attempts-per-tick-per-construction-queue"
      },
      "max-successful-attempts-per-tick-per-construction-queue": {
        "name": "max-successful-attempts-per-tick-per-construction-queue"
      },
      "character-health-bonus": {
        "name": "character-health-bonus"
      },
      "mining-drill-productivity-bonus": {
        "name": "mining-drill-productivity-bonus"
      },
      "train-braking-force-bonus": {
        "name": "train-braking-force-bonus"
      },
      "zoom-to-world-enabled": {
        "name": "zoom-to-world-enabled"
      },
      "zoom-to-world-ghost-building-enabled": {
        "name": "zoom-to-world-ghost-building-enabled"
      },
      "zoom-to-world-blueprint-enabled": {
        "name": "zoom-to-world-blueprint-enabled"
      },
      "zoom-to-world-deconstruction-planner-enabled": {
        "name": "zoom-to-world-deconstruction-planner-enabled"
      },
      "zoom-to-world-upgrade-planner-enabled": {
        "name": "zoom-to-world-upgrade-planner-enabled"
      },
      "zoom-to-world-selection-tool-enabled": {
        "name": "zoom-to-world-selection-tool-enabled"
      },
      "worker-robot-battery": {
        "name": "worker-robot-battery"
      },
      "laboratory-productivity": {
        "name": "laboratory-productivity"
      },
      "follower-robot-lifetime": {
        "name": "follower-robot-lifetime"
      },
      "artillery-range": {
        "name": "artillery-range"
      },
      "nothing": {
        "name": "nothing"
      },
      "character-logistic-requests": {
        "name": "character-logistic-requests"
      }
    },
    "type": "union"
  },
  "LocalisedString": {
    "name": "LocalisedString",
    "doc": "Localised strings are a way to support translation of in-game text. It is an array where the first element is the key and the remaining elements are parameters that will be substituted for placeholders in the template designated by the key.",
    "attrs": {},
    "type": "string or number or boolean or LuaObject or nil or array[LocalisedString]"
  },
  "DisplayResolution": {
    "name": "DisplayResolution",
    "doc": "",
    "attrs": {
      "width": {
        "name": "width",
        "type": "uint"
      },
      "height": {
        "name": "height",
        "type": "uint"
      }
    },
    "type": "table"
  },
  "LogisticParameters": {
    "name": "LogisticParameters",
    "doc": "The item. nil clears the filter.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The item. nil clears the filter."
      },
      "min": {
        "name": "min",
        "type": "uint",
        "doc": "Defaults to 0."
      },
      "max": {
        "name": "max",
        "type": "uint",
        "doc": "Defaults to max uint."
      }
    },
    "type": "table"
  },
  "RealOrientation": {
    "name": "RealOrientation",
    "doc": "The smooth orientation. It is a float in the range [0, 1) that covers a full circle, starting at the top and going clockwise. This means a value of 0 indicates \"north\", a value of 0.5 indicates \"south\".",
    "attrs": {},
    "type": "float"
  },
  "MapPosition": {
    "name": "MapPosition",
    "doc": "Coordinates on a surface, for example of an entity. MapPositions may be specified either as a dictionary with x, y as keys, or simply as an array with two elements.",
    "attrs": {
      "x": {
        "name": "x",
        "type": "double"
      },
      "y": {
        "name": "y",
        "type": "double"
      }
    },
    "type": "table or tuple"
  },
  "ChunkPosition": {
    "name": "ChunkPosition",
    "doc": "Coordinates of a chunk in a LuaSurface where each integer x/y represents a different chunk. This uses the same format as MapPosition, meaning it can be specified either with or without explicit keys. A MapPosition can be translated to a ChunkPosition by dividing the x/y values by 32.",
    "attrs": {
      "x": {
        "name": "x",
        "type": "int"
      },
      "y": {
        "name": "y",
        "type": "int"
      }
    },
    "type": "table or tuple"
  },
  "TilePosition": {
    "name": "TilePosition",
    "doc": "Coordinates of a tile on a LuaSurface where each integer x/y represents a different tile. This uses the same format as MapPosition, except it rounds any non-integer x/y down to whole numbers. It can be specified either with or without explicit keys.",
    "attrs": {
      "x": {
        "name": "x",
        "type": "int"
      },
      "y": {
        "name": "y",
        "type": "int"
      }
    },
    "type": "table or tuple"
  },
  "EquipmentPosition": {
    "name": "EquipmentPosition",
    "doc": "Position inside an equipment grid. This uses the same format as MapPosition, meaning it can be specified either with or without explicit keys.",
    "attrs": {
      "x": {
        "name": "x",
        "type": "int"
      },
      "y": {
        "name": "y",
        "type": "int"
      }
    },
    "type": "table or tuple"
  },
  "GuiLocation": {
    "name": "GuiLocation",
    "doc": "Screen coordinates of a GUI element in a LuaGui. This uses the same format as TilePosition, meaning it can be specified either with or without explicit keys.",
    "attrs": {
      "x": {
        "name": "x",
        "type": "int"
      },
      "y": {
        "name": "y",
        "type": "int"
      }
    },
    "type": "table or tuple"
  },
  "ChunkPositionAndArea": {
    "name": "ChunkPositionAndArea",
    "doc": "A ChunkPosition with an added bounding box for the area of the chunk.",
    "attrs": {
      "x": {
        "name": "x",
        "type": "int"
      },
      "y": {
        "name": "y",
        "type": "int"
      },
      "area": {
        "name": "area",
        "type": "BoundingBox"
      }
    },
    "type": "table"
  },
  "EquipmentPoint": {
    "name": "EquipmentPoint",
    "doc": "A table used to define a manual shape for a piece of equipment.",
    "attrs": {
      "x": {
        "name": "x",
        "type": "uint"
      },
      "y": {
        "name": "y",
        "type": "uint"
      }
    },
    "type": "table"
  },
  "GuiAnchor": {
    "name": "GuiAnchor",
    "doc": "If provided, only anchors the GUI element when the opened things type matches the type.",
    "attrs": {
      "gui": {
        "name": "gui",
        "type": "defines.relative_gui_type"
      },
      "position": {
        "name": "position",
        "type": "defines.relative_gui_position"
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "If provided, only anchors the GUI element when the opened things type matches the type."
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "If provided, only anchors the GUI element when the opened thing matches the name. name takes precedence over names."
      },
      "names": {
        "name": "names",
        "type": "array[string]",
        "doc": "If provided, only anchors the GUI element when the opened thing matches one of the names. When reading an anchor, names is always populated."
      }
    },
    "type": "table"
  },
  "TabAndContent": {
    "name": "TabAndContent",
    "doc": "",
    "attrs": {
      "tab": {
        "name": "tab",
        "type": "LuaGuiElement"
      },
      "content": {
        "name": "content",
        "type": "LuaGuiElement"
      }
    },
    "type": "table"
  },
  "OldTileAndPosition": {
    "name": "OldTileAndPosition",
    "doc": "",
    "attrs": {
      "old_tile": {
        "name": "old_tile",
        "type": "LuaTilePrototype"
      },
      "position": {
        "name": "position",
        "type": "TilePosition"
      }
    },
    "type": "table"
  },
  "Tags": {
    "name": "Tags",
    "doc": "A dictionary of string to the four basic Lua types: string, boolean, number, table.",
    "attrs": {},
    "type": "dictionary[string → AnyBasic]"
  },
  "SmokeSource": {
    "name": "SmokeSource",
    "doc": "",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string"
      },
      "frequency": {
        "name": "frequency",
        "type": "double"
      },
      "offset": {
        "name": "offset",
        "type": "double"
      },
      "position": {
        "name": "position",
        "type": "Vector"
      },
      "north_position": {
        "name": "north_position",
        "type": "Vector"
      },
      "east_position": {
        "name": "east_position",
        "type": "Vector"
      },
      "south_position": {
        "name": "south_position",
        "type": "Vector"
      },
      "west_position": {
        "name": "west_position",
        "type": "Vector"
      },
      "deviation": {
        "name": "deviation",
        "type": "MapPosition"
      },
      "starting_frame_speed": {
        "name": "starting_frame_speed",
        "type": "uint16"
      },
      "starting_frame_speed_deviation": {
        "name": "starting_frame_speed_deviation",
        "type": "double"
      },
      "starting_frame": {
        "name": "starting_frame",
        "type": "uint16"
      },
      "starting_frame_deviation": {
        "name": "starting_frame_deviation",
        "type": "double"
      },
      "slow_down_factor": {
        "name": "slow_down_factor",
        "type": "uint8"
      },
      "height": {
        "name": "height",
        "type": "float"
      },
      "height_deviation": {
        "name": "height_deviation",
        "type": "float"
      },
      "starting_vertical_speed": {
        "name": "starting_vertical_speed",
        "type": "float"
      },
      "starting_vertical_speed_deviation": {
        "name": "starting_vertical_speed_deviation",
        "type": "float"
      },
      "vertical_speed_slowdown": {
        "name": "vertical_speed_slowdown",
        "type": "float"
      }
    },
    "type": "table"
  },
  "Vector": {
    "name": "Vector",
    "doc": "A vector is a two-element array containing the x and y components. In some specific cases, the vector is a table with x and y keys instead, which the documentation will point out.",
    "attrs": {
      "x": {
        "name": "x",
        "type": "float"
      },
      "y": {
        "name": "y",
        "type": "float"
      }
    },
    "type": "table or tuple"
  },
  "BoundingBox": {
    "name": "BoundingBox",
    "doc": "Two positions, specifying the top-left and bottom-right corner of the box respectively. Like with MapPosition, the names of the members may be omitted. When read from the game, the third member orientation is present if it is non-zero.",
    "attrs": {
      "left_top": {
        "name": "left_top",
        "type": "MapPosition"
      },
      "right_bottom": {
        "name": "right_bottom",
        "type": "MapPosition"
      },
      "orientation": {
        "name": "orientation",
        "type": "RealOrientation"
      }
    },
    "type": "table or tuple"
  },
  "ScriptArea": {
    "name": "ScriptArea",
    "doc": "An area defined using the map editor.",
    "attrs": {
      "area": {
        "name": "area",
        "type": "BoundingBox"
      },
      "name": {
        "name": "name",
        "type": "string"
      },
      "color": {
        "name": "color",
        "type": "Color"
      },
      "id": {
        "name": "id",
        "type": "uint"
      }
    },
    "type": "table"
  },
  "ScriptPosition": {
    "name": "ScriptPosition",
    "doc": "A position defined using the map editor.",
    "attrs": {
      "position": {
        "name": "position",
        "type": "MapPosition"
      },
      "name": {
        "name": "name",
        "type": "string"
      },
      "color": {
        "name": "color",
        "type": "Color"
      },
      "id": {
        "name": "id",
        "type": "uint"
      }
    },
    "type": "table"
  },
  "Color": {
    "name": "Color",
    "doc": "Red, green, blue and alpha values, all in range [0, 1] or all in range [0, 255] if any value is > 1. All values here are optional. Color channels default to 0, the alpha channel defaults to 1.",
    "attrs": {
      "r": {
        "name": "r",
        "type": "float"
      },
      "g": {
        "name": "g",
        "type": "float"
      },
      "b": {
        "name": "b",
        "type": "float"
      },
      "a": {
        "name": "a",
        "type": "float"
      }
    },
    "type": "table or tuple"
  },
  "ColorModifier": {
    "name": "ColorModifier",
    "doc": "Same as Color, but red, green, blue and alpha values can be any floating point number, without any special handling of the range [1, 255].",
    "attrs": {
      "r": {
        "name": "r",
        "type": "float"
      },
      "g": {
        "name": "g",
        "type": "float"
      },
      "b": {
        "name": "b",
        "type": "float"
      },
      "a": {
        "name": "a",
        "type": "float"
      }
    },
    "type": "table or tuple"
  },
  "CraftingQueueItem": {
    "name": "CraftingQueueItem",
    "doc": "The index of the item in the crafting queue.",
    "attrs": {
      "index": {
        "name": "index",
        "type": "uint",
        "doc": "The index of the item in the crafting queue."
      },
      "recipe": {
        "name": "recipe",
        "type": "string",
        "doc": "The recipe being crafted."
      },
      "count": {
        "name": "count",
        "type": "uint",
        "doc": "The amount of items being crafted."
      },
      "prerequisite": {
        "name": "prerequisite",
        "type": "boolean",
        "doc": "The item is a prerequisite for another item in the queue."
      }
    },
    "type": "table"
  },
  "Alert": {
    "name": "Alert",
    "doc": "The tick this alert was created.",
    "attrs": {
      "tick": {
        "name": "tick",
        "type": "uint",
        "doc": "The tick this alert was created."
      },
      "target": {
        "name": "target",
        "type": "LuaEntity"
      },
      "prototype": {
        "name": "prototype",
        "type": "LuaEntityPrototype"
      },
      "position": {
        "name": "position",
        "type": "MapPosition"
      },
      "icon": {
        "name": "icon",
        "type": "SignalID",
        "doc": "The SignalID used for a custom alert. Only present for custom alerts."
      },
      "message": {
        "name": "message",
        "type": "LocalisedString",
        "doc": "The message for a custom alert. Only present for custom alerts."
      }
    },
    "type": "table"
  },
  "ScriptRenderVertexTarget": {
    "name": "ScriptRenderVertexTarget",
    "doc": "One vertex of a ScriptRenderPolygon.",
    "attrs": {
      "target": {
        "name": "target",
        "type": "MapPosition or LuaEntity"
      },
      "target_offset": {
        "name": "target_offset",
        "type": "Vector",
        "doc": "Only used if target is a LuaEntity."
      }
    },
    "type": "table"
  },
  "PathfinderWaypoint": {
    "name": "PathfinderWaypoint",
    "doc": "The position of the waypoint on its surface.",
    "attrs": {
      "position": {
        "name": "position",
        "type": "MapPosition",
        "doc": "The position of the waypoint on its surface."
      },
      "needs_destroy_to_reach": {
        "name": "needs_destroy_to_reach",
        "type": "boolean",
        "doc": "true if the path from the previous waypoint to this one goes through an entity that must be destroyed."
      }
    },
    "type": "table"
  },
  "CutsceneWaypoint": {
    "name": "CutsceneWaypoint",
    "doc": "Position to pan the camera to.",
    "attrs": {
      "position": {
        "name": "position",
        "type": "MapPosition",
        "doc": "Position to pan the camera to."
      },
      "target": {
        "name": "target",
        "type": "LuaEntity or LuaUnitGroup",
        "doc": "Entity or unit group to pan the camera to."
      },
      "transition_time": {
        "name": "transition_time",
        "type": "uint",
        "doc": "How many ticks it will take to reach this waypoint from the previous one."
      },
      "time_to_wait": {
        "name": "time_to_wait",
        "type": "uint",
        "doc": "Time in ticks to wait before moving to the next waypoint."
      },
      "zoom": {
        "name": "zoom",
        "type": "double",
        "doc": "Zoom level to be set when the waypoint is reached. When not specified, the previous waypoint's zoom is used."
      }
    },
    "type": "table"
  },
  "Decorative": {
    "name": "Decorative",
    "doc": "The name of the decorative prototype.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The name of the decorative prototype."
      },
      "position": {
        "name": "position",
        "type": "TilePosition"
      },
      "amount": {
        "name": "amount",
        "type": "uint8"
      }
    },
    "type": "table"
  },
  "DecorativeResult": {
    "name": "DecorativeResult",
    "doc": "",
    "attrs": {
      "position": {
        "name": "position",
        "type": "TilePosition"
      },
      "decorative": {
        "name": "decorative",
        "type": "LuaDecorativePrototype"
      },
      "amount": {
        "name": "amount",
        "type": "uint"
      }
    },
    "type": "table"
  },
  "PrototypeHistory": {
    "name": "PrototypeHistory",
    "doc": "The mod that created this prototype.",
    "attrs": {
      "created": {
        "name": "created",
        "type": "string",
        "doc": "The mod that created this prototype."
      },
      "changed": {
        "name": "changed",
        "type": "array[string]",
        "doc": "The mods that changed this prototype in the order they changed it."
      }
    },
    "type": "table"
  },
  "ChartTagSpec": {
    "name": "ChartTagSpec",
    "doc": "",
    "attrs": {
      "position": {
        "name": "position",
        "type": "MapPosition"
      },
      "icon": {
        "name": "icon",
        "type": "SignalID"
      },
      "text": {
        "name": "text",
        "type": "string"
      },
      "last_user": {
        "name": "last_user",
        "type": "PlayerIdentification"
      }
    },
    "type": "table"
  },
  "GameViewSettings": {
    "name": "GameViewSettings",
    "doc": "Parameters that affect the look and control of the game. Updating any of the member attributes here will immediately take effect in the game engine.",
    "attrs": {},
    "type": "LuaStruct"
  },
  "show_controller_gui": {
    "name": "show_controller_gui",
    "doc": "Show the controller GUI elements. This includes the toolbar, the selected tool slot, the armour slot, and the gun and ammunition slots.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_minimap": {
    "name": "show_minimap",
    "doc": "Show the chart in the upper right-hand corner of the screen.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_research_info": {
    "name": "show_research_info",
    "doc": "Show research progress and name in the upper right-hand corner of the screen.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_entity_info": {
    "name": "show_entity_info",
    "doc": "Show overlay icons on entities. Also known as \"alt-mode\".",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_alert_gui": {
    "name": "show_alert_gui",
    "doc": "Show the flashing alert icons next to the player's toolbar.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "update_entity_selection": {
    "name": "update_entity_selection",
    "doc": "When true (the default), mousing over an entity will select it. Otherwise, moving the mouse won't update entity selection.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_rail_block_visualisation": {
    "name": "show_rail_block_visualisation",
    "doc": "When true (false is default), the rails will always show the rail block visualisation.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_side_menu": {
    "name": "show_side_menu",
    "doc": "Shows or hides the buttons row.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_map_view_options": {
    "name": "show_map_view_options",
    "doc": "Shows or hides the view options when map is opened.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_entity_tooltip": {
    "name": "show_entity_tooltip",
    "doc": "Shows or hides the tooltip that is displayed when selecting an entity.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_quickbar": {
    "name": "show_quickbar",
    "doc": "Shows or hides quickbar of shortcuts.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_shortcut_bar": {
    "name": "show_shortcut_bar",
    "doc": "Shows or hides the shortcut bar.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_crafting_queue": {
    "name": "show_crafting_queue",
    "doc": "Shows or hides the crafting queue.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_tool_bar": {
    "name": "show_tool_bar",
    "doc": "Shows or hides the tool window with the weapons and armor.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "show_hotkey_suggestions": {
    "name": "show_hotkey_suggestions",
    "doc": "Shows or hides the mouse and keyboard/controller button hints in the bottom left corner if they are enabled in the interface settings.",
    "attrs": {},
    "type": "boolean Read/Write"
  },
  "PollutionMapSettings": {
    "name": "PollutionMapSettings",
    "doc": "These values are for the time frame of one second (60 ticks).",
    "attrs": {
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "doc": "Whether pollution is enabled at all."
      },
      "diffusion_ratio": {
        "name": "diffusion_ratio",
        "type": "double",
        "doc": "The amount that is diffused to a neighboring chunk (possibly repeated for other directions as well). Defaults to 0.02."
      },
      "min_to_diffuse": {
        "name": "min_to_diffuse",
        "type": "double",
        "doc": "The amount of PUs that need to be in a chunk for it to start diffusing. Defaults to 15."
      },
      "ageing": {
        "name": "ageing",
        "type": "double",
        "doc": "The amount of pollution eaten by a chunk's tiles as a percentage of 1. Also known as absorption modifier. Defaults to 1."
      },
      "expected_max_per_chunk": {
        "name": "expected_max_per_chunk",
        "type": "double",
        "doc": "Any amount of pollution larger than this value is visualized as this value instead. Defaults to 150."
      },
      "min_to_show_per_chunk": {
        "name": "min_to_show_per_chunk",
        "type": "double",
        "doc": "Any amount of pollution smaller than this value (but bigger than zero) is visualized as this value instead. Defaults to 50."
      },
      "min_pollution_to_damage_trees": {
        "name": "min_pollution_to_damage_trees",
        "type": "double",
        "doc": "Defaults to 60."
      },
      "pollution_with_max_forest_damage": {
        "name": "pollution_with_max_forest_damage",
        "type": "double",
        "doc": "Defaults to 150."
      },
      "pollution_per_tree_damage": {
        "name": "pollution_per_tree_damage",
        "type": "double",
        "doc": "Defaults to 50."
      },
      "pollution_restored_per_tree_damage": {
        "name": "pollution_restored_per_tree_damage",
        "type": "double",
        "doc": "Defaults to 10."
      },
      "max_pollution_to_restore_trees": {
        "name": "max_pollution_to_restore_trees",
        "type": "double",
        "doc": "Defaults to 20."
      },
      "enemy_attack_pollution_consumption_modifier": {
        "name": "enemy_attack_pollution_consumption_modifier",
        "type": "double",
        "doc": "Defaults to 1."
      }
    },
    "type": "table"
  },
  "EnemyEvolutionMapSettings": {
    "name": "EnemyEvolutionMapSettings",
    "doc": "These values represent a percentual increase in evolution. This means a value of 0.1 would increase evolution by 10%.",
    "attrs": {
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "doc": "Whether enemy evolution is enabled at all."
      },
      "time_factor": {
        "name": "time_factor",
        "type": "double",
        "doc": "The amount evolution naturally progresses by every second. Defaults to 0.000004."
      },
      "destroy_factor": {
        "name": "destroy_factor",
        "type": "double",
        "doc": "The amount evolution progresses for every destroyed spawner. Defaults to 0.002."
      },
      "pollution_factor": {
        "name": "pollution_factor",
        "type": "double",
        "doc": "The amount evolution progresses for every unit of pollution. Defaults to 0.0000009."
      }
    },
    "type": "table"
  },
  "EnemyExpansionMapSettings": {
    "name": "EnemyExpansionMapSettings",
    "doc": "Candidate chunks are given scores to determine which one of them should be expanded into. This score takes into account various settings noted below. The iteration is over a square region centered around the chunk for which the calculation is done, and includes the central chunk as well. Distances are calculated as Manhattan distance.",
    "attrs": {
      "enabled": {
        "name": "enabled",
        "type": "boolean",
        "doc": "Whether enemy expansion is enabled at all."
      },
      "max_expansion_distance": {
        "name": "max_expansion_distance",
        "type": "uint",
        "doc": "Distance in chunks from the furthest base around to prevent expansions from reaching too far into the player's territory. Defaults to 7."
      },
      "friendly_base_influence_radius": {
        "name": "friendly_base_influence_radius",
        "type": "uint",
        "doc": "Defaults to 2."
      },
      "enemy_building_influence_radius": {
        "name": "enemy_building_influence_radius",
        "type": "uint",
        "doc": "Defaults to 2."
      },
      "building_coefficient": {
        "name": "building_coefficient",
        "type": "double",
        "doc": "Defaults to 0.1."
      },
      "other_base_coefficient": {
        "name": "other_base_coefficient",
        "type": "double",
        "doc": "Defaults to 2.0."
      },
      "neighbouring_chunk_coefficient": {
        "name": "neighbouring_chunk_coefficient",
        "type": "double",
        "doc": "Defaults to 0.5."
      },
      "neighbouring_base_chunk_coefficient": {
        "name": "neighbouring_base_chunk_coefficient",
        "type": "double",
        "doc": "Defaults to 0.4."
      },
      "max_colliding_tiles_coefficient": {
        "name": "max_colliding_tiles_coefficient",
        "type": "double",
        "doc": "A chunk has to have at most this high of a percentage of unbuildable tiles for it to be considered a candidate to avoid chunks full of water as candidates. Defaults to 0.9, or 90%."
      },
      "settler_group_min_size": {
        "name": "settler_group_min_size",
        "type": "uint",
        "doc": "The minimum size of a biter group that goes to build a new base. This is multiplied by the evolution factor. Defaults to 5."
      },
      "settler_group_max_size": {
        "name": "settler_group_max_size",
        "type": "uint",
        "doc": "The maximum size of a biter group that goes to build a new base. This is multiplied by the evolution factor. Defaults to 20."
      },
      "min_expansion_cooldown": {
        "name": "min_expansion_cooldown",
        "type": "uint",
        "doc": "The minimum time between expansions in ticks. The actual cooldown is adjusted to the current evolution levels. Defaults to 4*3 600=14 400 ticks."
      },
      "max_expansion_cooldown": {
        "name": "max_expansion_cooldown",
        "type": "uint",
        "doc": "The maximum time between expansions in ticks. The actual cooldown is adjusted to the current evolution levels. Defaults to 60*3 600=216 000 ticks."
      }
    },
    "type": "table"
  },
  "UnitGroupMapSettings": {
    "name": "UnitGroupMapSettings",
    "doc": "The minimum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to 3 600 ticks.",
    "attrs": {
      "min_group_gathering_time": {
        "name": "min_group_gathering_time",
        "type": "uint",
        "doc": "The minimum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to 3 600 ticks."
      },
      "max_group_gathering_time": {
        "name": "max_group_gathering_time",
        "type": "uint",
        "doc": "The maximum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to 10*3 600=36 000 ticks."
      },
      "max_wait_time_for_late_members": {
        "name": "max_wait_time_for_late_members",
        "type": "uint",
        "doc": "After gathering has finished, the group is allowed to wait this long in ticks for delayed members. New members are not accepted anymore however. Defaults to 2*3 600=7 200 ticks."
      },
      "min_group_radius": {
        "name": "min_group_radius",
        "type": "double",
        "doc": "The minimum group radius in tiles. The actual radius is adjusted based on the number of members. Defaults to 5.0."
      },
      "max_group_radius": {
        "name": "max_group_radius",
        "type": "double",
        "doc": "The maximum group radius in tiles. The actual radius is adjusted based on the number of members. Defaults to 30.0."
      },
      "max_member_speedup_when_behind": {
        "name": "max_member_speedup_when_behind",
        "type": "double",
        "doc": "The maximum speed a percentage of its regular speed that a group member can speed up to when catching up with the group. Defaults to 1.4, or 140%."
      },
      "max_member_slowdown_when_ahead": {
        "name": "max_member_slowdown_when_ahead",
        "type": "double",
        "doc": "The minimum speed a percentage of its regular speed that a group member can slow down to when ahead of the group. Defaults to 0.6, or 60%."
      },
      "max_group_slowdown_factor": {
        "name": "max_group_slowdown_factor",
        "type": "double",
        "doc": "The minimum speed as a percentage of its maximum speed that a group will slow down to so members that fell behind can catch up. Defaults to 0.3, or 30%."
      },
      "max_group_member_fallback_factor": {
        "name": "max_group_member_fallback_factor",
        "type": "double",
        "doc": "When a member of a group falls back more than this factor times the group radius, the group will slow down to its max_group_slowdown_factor speed to let them catch up. Defaults to 3."
      },
      "member_disown_distance": {
        "name": "member_disown_distance",
        "type": "double",
        "doc": "When a member of a group falls back more than this factor times the group radius, it will be dropped from the group. Defaults to 10."
      },
      "tick_tolerance_when_member_arrives": {
        "name": "tick_tolerance_when_member_arrives",
        "type": "uint"
      },
      "max_gathering_unit_groups": {
        "name": "max_gathering_unit_groups",
        "type": "uint",
        "doc": "The maximum number of automatically created unit groups gathering for attack at any time. Defaults to 30."
      },
      "max_unit_group_size": {
        "name": "max_unit_group_size",
        "type": "uint",
        "doc": "The maximum number of members for an attack unit group. This only affects automatically created unit groups, manual groups created through the API are unaffected. Defaults to 200."
      }
    },
    "type": "table"
  },
  "SteeringMapSetting": {
    "name": "SteeringMapSetting",
    "doc": "Does not include the radius of the unit.",
    "attrs": {
      "radius": {
        "name": "radius",
        "type": "double",
        "doc": "Does not include the radius of the unit."
      },
      "separation_factor": {
        "name": "separation_factor",
        "type": "double"
      },
      "separation_force": {
        "name": "separation_force",
        "type": "double"
      },
      "force_unit_fuzzy_goto_behavior": {
        "name": "force_unit_fuzzy_goto_behavior",
        "type": "boolean",
        "doc": "Used to make steering look better for aesthetic purposes."
      }
    },
    "type": "table"
  },
  "SteeringMapSettings": {
    "name": "SteeringMapSettings",
    "doc": "",
    "attrs": {
      "default": {
        "name": "default",
        "type": "SteeringMapSetting"
      },
      "moving": {
        "name": "moving",
        "type": "SteeringMapSetting"
      }
    },
    "type": "table"
  },
  "PathFinderMapSettings": {
    "name": "PathFinderMapSettings",
    "doc": "The pathfinder performs a step of the backward search every fwd2bwd_ratio'th step. The minimum allowed value is 2, which means symmetric search. The default value is 5.",
    "attrs": {
      "fwd2bwd_ratio": {
        "name": "fwd2bwd_ratio",
        "type": "uint",
        "doc": "The pathfinder performs a step of the backward search every fwd2bwd_ratio'th step. The minimum allowed value is 2, which means symmetric search. The default value is 5."
      },
      "goal_pressure_ratio": {
        "name": "goal_pressure_ratio",
        "type": "double",
        "doc": "When looking at which node to check next, their heuristic value is multiplied by this ratio. The higher it is, the more the search is directed straight at the goal. Defaults to 2."
      },
      "max_steps_worked_per_tick": {
        "name": "max_steps_worked_per_tick",
        "type": "double",
        "doc": "The maximum number of nodes that are expanded per tick. Defaults to 1 000."
      },
      "max_work_done_per_tick": {
        "name": "max_work_done_per_tick",
        "type": "uint",
        "doc": "The maximum amount of work each pathfinding job is allowed to do per tick. Defaults to 8 000."
      },
      "use_path_cache": {
        "name": "use_path_cache",
        "type": "boolean",
        "doc": "Whether to cache paths at all. Defaults to true."
      },
      "short_cache_size": {
        "name": "short_cache_size",
        "type": "uint",
        "doc": "Number of elements in the short cache. Defaults to 5."
      },
      "long_cache_size": {
        "name": "long_cache_size",
        "type": "uint",
        "doc": "Number of elements in the long cache. Defaults to 25."
      },
      "short_cache_min_cacheable_distance": {
        "name": "short_cache_min_cacheable_distance",
        "type": "double",
        "doc": "The minimal distance to the goal in tiles required to be searched in the short path cache. Defaults to 10."
      },
      "short_cache_min_algo_steps_to_cache": {
        "name": "short_cache_min_algo_steps_to_cache",
        "type": "uint",
        "doc": "The minimal number of nodes required to be searched in the short path cache. Defaults to 50."
      },
      "long_cache_min_cacheable_distance": {
        "name": "long_cache_min_cacheable_distance",
        "type": "double",
        "doc": "The minimal distance to the goal in tiles required to be searched in the long path cache. Defaults to 30."
      },
      "cache_max_connect_to_cache_steps_multiplier": {
        "name": "cache_max_connect_to_cache_steps_multiplier",
        "type": "uint",
        "doc": "When looking for a connection to a cached path, search at most for this number of steps times the original estimate. Defaults to 100."
      },
      "cache_accept_path_start_distance_ratio": {
        "name": "cache_accept_path_start_distance_ratio",
        "type": "double",
        "doc": "When looking for a path from cache, make sure it doesn't start too far from the requested start in relative terms. Defaults to 0.2."
      },
      "cache_accept_path_end_distance_ratio": {
        "name": "cache_accept_path_end_distance_ratio",
        "type": "double",
        "doc": "When looking for a path from cache, make sure it doesn't end too far from the requested end in relative terms. This is typically more lenient than the start ratio since the end target could be moving. Defaults to 0.15."
      },
      "negative_cache_accept_path_start_distance_ratio": {
        "name": "negative_cache_accept_path_start_distance_ratio",
        "type": "double",
        "doc": "Same principle as cache_accept_path_start_distance_ratio, but used for negative cache queries. Defaults to 0.3."
      },
      "negative_cache_accept_path_end_distance_ratio": {
        "name": "negative_cache_accept_path_end_distance_ratio",
        "type": "double",
        "doc": "Same principle as cache_accept_path_end_distance_ratio, but used for negative cache queries. Defaults to 0.3."
      },
      "cache_path_start_distance_rating_multiplier": {
        "name": "cache_path_start_distance_rating_multiplier",
        "type": "double",
        "doc": "When assigning a rating to the best path, this multiplier times start distances is considered. Defaults to 10."
      },
      "cache_path_end_distance_rating_multiplier": {
        "name": "cache_path_end_distance_rating_multiplier",
        "type": "double",
        "doc": "When assigning a rating to the best path, this multiplier times end distances is considered. This value is typically higher than the start multiplier as this results in better end path quality. Defaults to 20."
      },
      "stale_enemy_with_same_destination_collision_penalty": {
        "name": "stale_enemy_with_same_destination_collision_penalty",
        "type": "double",
        "doc": "A penalty that is applied for another unit that is on the way to the goal. This is mainly relevant for situations where a group of units has arrived at the target they are supposed to attack, making units further back circle around to reach the target. Defaults to 30."
      },
      "ignore_moving_enemy_collision_distance": {
        "name": "ignore_moving_enemy_collision_distance",
        "type": "double",
        "doc": "The distance in tiles after which other moving units are not considered for pathfinding. Defaults to 5."
      },
      "enemy_with_different_destination_collision_penalty": {
        "name": "enemy_with_different_destination_collision_penalty",
        "type": "double",
        "doc": "A penalty that is applied for another unit that is too close and either not moving or has a different goal. Defaults to 30."
      },
      "general_entity_collision_penalty": {
        "name": "general_entity_collision_penalty",
        "type": "double",
        "doc": "The general collision penalty with other units. Defaults to 10."
      },
      "general_entity_subsequent_collision_penalty": {
        "name": "general_entity_subsequent_collision_penalty",
        "type": "double",
        "doc": "The collision penalty for positions that require the destruction of an entity to get to. Defaults to 3."
      },
      "extended_collision_penalty": {
        "name": "extended_collision_penalty",
        "type": "double",
        "doc": "The collision penalty for collisions in the extended bounding box but outside the entity's actual bounding box. Defaults to 3."
      },
      "max_clients_to_accept_any_new_request": {
        "name": "max_clients_to_accept_any_new_request",
        "type": "uint",
        "doc": "The amount of path finder requests accepted per tick regardless of the requested path's length. Defaults to 10."
      },
      "max_clients_to_accept_short_new_request": {
        "name": "max_clients_to_accept_short_new_request",
        "type": "uint",
        "doc": "When the max_clients_to_accept_any_new_request amount is exhausted, only path finder requests with a short estimate will be accepted until this amount (per tick) is reached. Defaults to 100."
      },
      "direct_distance_to_consider_short_request": {
        "name": "direct_distance_to_consider_short_request",
        "type": "uint",
        "doc": "The maximum direct distance in tiles before a request is no longer considered short. Defaults to 100."
      },
      "short_request_max_steps": {
        "name": "short_request_max_steps",
        "type": "uint",
        "doc": "The maximum amount of nodes a short request will traverse before being rescheduled as a long request. Defaults to 1000."
      },
      "short_request_ratio": {
        "name": "short_request_ratio",
        "type": "double",
        "doc": "The amount of steps that are allocated to short requests each tick, as a percentage of all available steps. Defaults to 0.5, or 50%."
      },
      "min_steps_to_check_path_find_termination": {
        "name": "min_steps_to_check_path_find_termination",
        "type": "uint",
        "doc": "The minimum amount of steps that are guaranteed to be performed for every request. Defaults to 2000."
      },
      "start_to_goal_cost_multiplier_to_terminate_path_find": {
        "name": "start_to_goal_cost_multiplier_to_terminate_path_find",
        "type": "double",
        "doc": "If the actual amount of steps is higher than the initial estimate by this factor, pathfinding is terminated. Defaults to 2000.0."
      },
      "overload_levels": {
        "name": "overload_levels",
        "type": "array[uint]",
        "doc": "The thresholds of waiting clients after each of which the per-tick work limit will be increased by the corresponding value in overload_multipliers. This is to avoid clients having to wait too long. Must have the same number of elements as overload_multipliers. Defaults to {0, 100, 500}."
      },
      "overload_multipliers": {
        "name": "overload_multipliers",
        "type": "array[double]",
        "doc": "The multipliers to the amount of per-tick work applied after the corresponding thresholds in overload_levels have been reached. Must have the same number of elements as overload_multipliers. Defaults to {2, 3, 4}."
      },
      "negative_path_cache_delay_interval": {
        "name": "negative_path_cache_delay_interval",
        "type": "uint",
        "doc": "The delay in ticks between decrementing the score of all paths in the negative cache by one. Defaults to 20."
      }
    },
    "type": "table"
  },
  "MapSettings": {
    "name": "MapSettings",
    "doc": "Various game-related settings. Updating any of the attributes will immediately take effect in the game engine.",
    "attrs": {},
    "type": "LuaStruct"
  },
  "pollution": {
    "name": "pollution",
    "attrs": {},
    "type": "PollutionMapSettings Read/Write"
  },
  "enemy_evolution": {
    "name": "enemy_evolution",
    "attrs": {},
    "type": "EnemyEvolutionMapSettings Read/Write"
  },
  "enemy_expansion": {
    "name": "enemy_expansion",
    "attrs": {},
    "type": "EnemyExpansionMapSettings Read/Write"
  },
  "unit_group": {
    "name": "unit_group",
    "attrs": {},
    "type": "UnitGroupMapSettings Read/Write"
  },
  "steering": {
    "name": "steering",
    "attrs": {},
    "type": "SteeringMapSetting Read/Write"
  },
  "path_finder": {
    "name": "path_finder",
    "attrs": {},
    "type": "PathFinderMapSettings Read/Write"
  },
  "max_failed_behavior_count": {
    "name": "max_failed_behavior_count",
    "doc": "If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters getting stuck within their own base.",
    "attrs": {},
    "type": "uint Read/Write"
  },
  "DifficultySettings": {
    "name": "DifficultySettings",
    "doc": "Technology and recipe difficulty settings. Updating any of the attributes will immediately take effect in the game engine.",
    "attrs": {},
    "type": "LuaStruct"
  },
  "recipe_difficulty": {
    "name": "recipe_difficulty",
    "attrs": {},
    "type": "defines.difficulty_settings.recipe_difficulty Read/Write"
  },
  "technology_difficulty": {
    "name": "technology_difficulty",
    "attrs": {},
    "type": "defines.difficulty_settings.technology_difficulty Read/Write"
  },
  "technology_price_multiplier": {
    "name": "technology_price_multiplier",
    "doc": "A value in range [0.001, 1000].",
    "attrs": {},
    "type": "double Read/Write"
  },
  "research_queue_setting": {
    "name": "research_queue_setting",
    "doc": "Changing this to \"always\" or \"after-victory\" does not automatically unlock the research queue. See LuaForce::research_queue_enabled for that.",
    "attrs": {},
    "type": "\"after-victory\" or \"always\" or \"never\" Read/Write"
  },
  "MapAndDifficultySettings": {
    "name": "MapAndDifficultySettings",
    "doc": "A standard table containing all MapSettings attributes plus an additional table that contains all DifficultySettings properties.",
    "attrs": {
      "pollution": {
        "name": "pollution",
        "type": "PollutionMapSettings"
      },
      "enemy_evolution": {
        "name": "enemy_evolution",
        "type": "EnemyEvolutionMapSettings"
      },
      "enemy_expansion": {
        "name": "enemy_expansion",
        "type": "EnemyExpansionMapSettings"
      },
      "unit_group": {
        "name": "unit_group",
        "type": "UnitGroupMapSettings"
      },
      "steering": {
        "name": "steering",
        "type": "SteeringMapSettings"
      },
      "path_finder": {
        "name": "path_finder",
        "type": "PathFinderMapSettings"
      },
      "max_failed_behavior_count": {
        "name": "max_failed_behavior_count",
        "type": "uint",
        "doc": "If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters getting stuck within their own base."
      },
      "difficulty_settings": {
        "name": "difficulty_settings",
        "type": "MapDifficultySettings"
      }
    },
    "type": "table"
  },
  "MapDifficultySettings": {
    "name": "MapDifficultySettings",
    "doc": "A value in range [0.001, 1000].",
    "attrs": {
      "recipe_difficulty": {
        "name": "recipe_difficulty",
        "type": "defines.difficulty_settings.recipe_difficulty"
      },
      "technology_difficulty": {
        "name": "technology_difficulty",
        "type": "defines.difficulty_settings.technology_difficulty"
      },
      "technology_price_multiplier": {
        "name": "technology_price_multiplier",
        "type": "double",
        "doc": "A value in range [0.001, 1000]."
      },
      "research_queue_setting": {
        "name": "research_queue_setting",
        "type": "\"after-victory\" or \"always\" or \"never\"",
        "doc": "Changing this to \"always\" or \"after-victory\" does not automatically unlock the research queue. See LuaForce::research_queue_enabled for that."
      }
    },
    "type": "table"
  },
  "MapExchangeStringData": {
    "name": "MapExchangeStringData",
    "doc": "The data that can be extracted from a map exchange string, as a plain table.",
    "attrs": {
      "map_settings": {
        "name": "map_settings",
        "type": "MapAndDifficultySettings"
      },
      "map_gen_settings": {
        "name": "map_gen_settings",
        "type": "MapGenSettings"
      }
    },
    "type": "table"
  },
  "BlueprintSignalIcon": {
    "name": "BlueprintSignalIcon",
    "doc": "The icon to use. It can be any item icon as well as any virtual signal icon.",
    "attrs": {
      "signal": {
        "name": "signal",
        "type": "SignalID",
        "doc": "The icon to use. It can be any item icon as well as any virtual signal icon."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "doc": "Index of the icon in the blueprint icons slots. Has to be an integer in the range [1, 4]."
      }
    },
    "type": "table"
  },
  "BlueprintEntity": {
    "name": "BlueprintEntity",
    "doc": "The representation of an entity inside of a blueprint. It has at least these fields, but can contain additional ones depending on the kind of entity.",
    "attrs": {
      "entity_number": {
        "name": "entity_number",
        "type": "uint",
        "doc": "The entity's unique identifier in the blueprint."
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The prototype name of the entity."
      },
      "position": {
        "name": "position",
        "type": "MapPosition",
        "doc": "The position of the entity."
      },
      "direction": {
        "name": "direction",
        "type": "defines.direction",
        "doc": "The direction the entity is facing. Only present for entities that can face in different directions and when the entity is not facing north."
      },
      "tags": {
        "name": "tags",
        "type": "Tags",
        "doc": "The entity tags of the entity, if there are any. Only relevant for entity ghosts."
      },
      "items": {
        "name": "items",
        "type": "dictionary[string → uint]",
        "doc": "The items that the entity will request when revived, if there are any. It's a mapping of prototype names to amounts. Only relevant for entity ghosts."
      },
      "connections": {
        "name": "connections",
        "type": "BlueprintCircuitConnection",
        "doc": "The circuit network connections of the entity, if there are any. Only relevant for entities that support circuit connections."
      },
      "control_behavior": {
        "name": "control_behavior",
        "type": "BlueprintControlBehavior",
        "doc": "The control behavior of the entity, if it has one. The format of the control behavior depends on the entity's type. Only relevant for entities that support control behaviors."
      },
      "schedule": {
        "name": "schedule",
        "type": "array[TrainScheduleRecord]",
        "doc": "The schedule of the entity, if it has one. Only relevant for locomotives."
      }
    },
    "type": "table"
  },
  "Tile": {
    "name": "Tile",
    "doc": "The position of the tile.",
    "attrs": {
      "position": {
        "name": "position",
        "type": "TilePosition",
        "doc": "The position of the tile."
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The prototype name of the tile."
      }
    },
    "type": "table"
  },
  "Fluid": {
    "name": "Fluid",
    "doc": "Fluid prototype name of the fluid.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Fluid prototype name of the fluid."
      },
      "amount": {
        "name": "amount",
        "type": "double",
        "doc": "Amount of the fluid."
      },
      "temperature": {
        "name": "temperature",
        "type": "double",
        "doc": "The temperature. When reading from LuaFluidBox, this field will always be present. It is not necessary to specify it when writing, however. When not specified, the fluid will be set to the fluid's default temperature as specified in the fluid's prototype."
      }
    },
    "type": "table"
  },
  "Ingredient": {
    "name": "Ingredient",
    "doc": "Prototype name of the required item or fluid.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"item\" or \"fluid\""
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Prototype name of the required item or fluid."
      },
      "amount": {
        "name": "amount",
        "type": "double",
        "doc": "Amount of the item or fluid."
      },
      "catalyst_amount": {
        "name": "catalyst_amount",
        "type": "uint or double",
        "doc": "How much of this ingredient is a catalyst."
      },
      "minimum_temperature": {
        "name": "minimum_temperature",
        "type": "double",
        "doc": "The minimum fluid temperature required."
      },
      "maximum_temperature": {
        "name": "maximum_temperature",
        "type": "double",
        "doc": "The maximum fluid temperature allowed."
      }
    },
    "type": "table"
  },
  "Product": {
    "name": "Product",
    "doc": "Prototype name of the result.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"item\" or \"fluid\""
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Prototype name of the result."
      },
      "amount": {
        "name": "amount",
        "type": "double",
        "doc": "Amount of the item or fluid to give. If not specified, amount_min, amount_max and probability must all be specified."
      },
      "amount_min": {
        "name": "amount_min",
        "type": "uint or double",
        "doc": "Minimal amount of the item or fluid to give. Has no effect when amount is specified."
      },
      "amount_max": {
        "name": "amount_max",
        "type": "uint or double",
        "doc": "Maximum amount of the item or fluid to give. Has no effect when amount is specified."
      },
      "probability": {
        "name": "probability",
        "type": "double",
        "doc": "A value in range [0, 1]. Item or fluid is only given with this probability; otherwise no product is produced."
      },
      "catalyst_amount": {
        "name": "catalyst_amount",
        "type": "uint or double",
        "doc": "How much of this product is a catalyst."
      },
      "temperature": {
        "name": "temperature",
        "type": "double",
        "doc": "The fluid temperature of this product."
      }
    },
    "type": "table"
  },
  "Loot": {
    "name": "Loot",
    "doc": "Item prototype name of the result.",
    "attrs": {
      "item": {
        "name": "item",
        "type": "string",
        "doc": "Item prototype name of the result."
      },
      "probability": {
        "name": "probability",
        "type": "double",
        "doc": "Probability that any loot at all will drop, as a number in range [0, 1]."
      },
      "count_min": {
        "name": "count_min",
        "type": "double",
        "doc": "Minimum amount of loot to drop."
      },
      "count_max": {
        "name": "count_max",
        "type": "double",
        "doc": "Maximum amount of loot to drop."
      }
    },
    "type": "table"
  },
  "TechnologyModifier": {
    "name": "TechnologyModifier",
    "doc": "The effect that is applied when a technology is researched. It is a table that contains at least the field type.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "ModifierType",
        "doc": "Modifier type. Specifies which of the other fields will be available."
      },
      "ammo_category": {
        "name": "ammo_category",
        "type": "string",
        "doc": "Prototype name of the ammunition category that is affected"
      },
      "modifier": {
        "name": "modifier",
        "type": "double",
        "doc": "Modification value. This value will be added to the variable it modifies."
      },
      "item": {
        "name": "item",
        "type": "string",
        "doc": "Item prototype name to give."
      },
      "count": {
        "name": "count",
        "type": "uint",
        "doc": "Number of items to give. Defaults to 1."
      },
      "turret_id": {
        "name": "turret_id",
        "type": "string",
        "doc": "Turret prototype name this modifier will affect."
      },
      "recipe": {
        "name": "recipe",
        "type": "string",
        "doc": "Recipe prototype name to unlock."
      },
      "effect_description": {
        "name": "effect_description",
        "type": "LocalisedString",
        "doc": "Description of this nothing modifier."
      }
    },
    "type": "table"
  },
  "Offer": {
    "name": "Offer",
    "doc": "A single offer on a market entity.",
    "attrs": {
      "price": {
        "name": "price",
        "type": "array[Ingredient]",
        "doc": "List of prices."
      },
      "offer": {
        "name": "offer",
        "type": "TechnologyModifier",
        "doc": "The action that will take place when a player accepts the offer. Usually a \"give-item\" modifier."
      }
    },
    "type": "table"
  },
  "AutoplaceSpecification": {
    "name": "AutoplaceSpecification",
    "doc": "Specifies how probability and richness are calculated when placing something on the map. Can be specified either using probability_expression and richness_expression or by using all the other fields.",
    "attrs": {
      "probability_expression": {
        "name": "probability_expression",
        "type": "NoiseExpression"
      },
      "richness_expression": {
        "name": "richness_expression",
        "type": "NoiseExpression"
      },
      "coverage": {
        "name": "coverage",
        "type": "double"
      },
      "sharpness": {
        "name": "sharpness",
        "type": "double"
      },
      "max_probability": {
        "name": "max_probability",
        "type": "double"
      },
      "placement_density": {
        "name": "placement_density",
        "type": "uint"
      },
      "richness_base": {
        "name": "richness_base",
        "type": "double"
      },
      "richness_multiplier": {
        "name": "richness_multiplier",
        "type": "double"
      },
      "richness_multiplier_distance_bonus": {
        "name": "richness_multiplier_distance_bonus",
        "type": "double"
      },
      "starting_area_size": {
        "name": "starting_area_size",
        "type": "uint"
      },
      "order": {
        "name": "order",
        "type": "string"
      },
      "default_enabled": {
        "name": "default_enabled",
        "type": "boolean"
      },
      "peaks": {
        "name": "peaks",
        "type": "array[AutoplaceSpecificationPeak]"
      },
      "control": {
        "name": "control",
        "type": "string",
        "doc": "Control prototype name."
      },
      "tile_restriction": {
        "name": "tile_restriction",
        "type": "array[AutoplaceSpecificationRestriction]"
      },
      "force": {
        "name": "force",
        "type": "string"
      },
      "random_probability_penalty": {
        "name": "random_probability_penalty",
        "type": "double"
      }
    },
    "type": "table"
  },
  "NoiseExpression": {
    "name": "NoiseExpression",
    "doc": "A fragment of a functional program used to generate coherent noise, probably for purposes related to terrain generation. These can only be meaningfully written/modified during the data load phase. More detailed information is found on the prototype docs.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "string",
        "doc": "Names the type of the expression and determines what other fields are required."
      }
    },
    "type": "table"
  },
  "AutoplaceSpecificationPeak": {
    "name": "AutoplaceSpecificationPeak",
    "doc": "Prototype name of the noise layer.",
    "attrs": {
      "influence": {
        "name": "influence",
        "type": "double"
      },
      "max_influence": {
        "name": "max_influence",
        "type": "double"
      },
      "min_influence": {
        "name": "min_influence",
        "type": "double"
      },
      "richness_influence": {
        "name": "richness_influence",
        "type": "double"
      },
      "noisePersistence": {
        "name": "noisePersistence",
        "type": "double"
      },
      "noise_layer": {
        "name": "noise_layer",
        "type": "string",
        "doc": "Prototype name of the noise layer."
      },
      "noise_octaves_difference": {
        "name": "noise_octaves_difference",
        "type": "double"
      },
      "water_optimal": {
        "name": "water_optimal",
        "type": "double"
      },
      "water_range": {
        "name": "water_range",
        "type": "double"
      },
      "water_max_range": {
        "name": "water_max_range",
        "type": "double"
      },
      "water_top_property_limit": {
        "name": "water_top_property_limit",
        "type": "double"
      },
      "elevation_optimal": {
        "name": "elevation_optimal",
        "type": "double"
      },
      "elevation_range": {
        "name": "elevation_range",
        "type": "double"
      },
      "elevation_max_range": {
        "name": "elevation_max_range",
        "type": "double"
      },
      "elevation_top_property_limit": {
        "name": "elevation_top_property_limit",
        "type": "double"
      },
      "temperature_optimal": {
        "name": "temperature_optimal",
        "type": "double"
      },
      "temperature_range": {
        "name": "temperature_range",
        "type": "double"
      },
      "temperature_max_range": {
        "name": "temperature_max_range",
        "type": "double"
      },
      "temperature_top_property_limit": {
        "name": "temperature_top_property_limit",
        "type": "double"
      },
      "starting_area_weight_optimal": {
        "name": "starting_area_weight_optimal",
        "type": "double"
      },
      "starting_area_weight_range": {
        "name": "starting_area_weight_range",
        "type": "double"
      },
      "starting_area_weight_max_range": {
        "name": "starting_area_weight_max_range",
        "type": "double"
      },
      "starting_area_weight_top_property_limit": {
        "name": "starting_area_weight_top_property_limit",
        "type": "double"
      },
      "tier_from_start_optimal": {
        "name": "tier_from_start_optimal",
        "type": "double"
      },
      "tier_from_start_range": {
        "name": "tier_from_start_range",
        "type": "double"
      },
      "tier_from_start_max_range": {
        "name": "tier_from_start_max_range",
        "type": "double"
      },
      "tier_from_start_top_property_limit": {
        "name": "tier_from_start_top_property_limit",
        "type": "double"
      },
      "distance_optimal": {
        "name": "distance_optimal",
        "type": "double"
      },
      "distance_range": {
        "name": "distance_range",
        "type": "double"
      },
      "distance_max_range": {
        "name": "distance_max_range",
        "type": "double"
      },
      "distance_top_property_limit": {
        "name": "distance_top_property_limit",
        "type": "double"
      },
      "aux_optimal": {
        "name": "aux_optimal",
        "type": "double"
      },
      "aux_range": {
        "name": "aux_range",
        "type": "double"
      },
      "aux_max_range": {
        "name": "aux_max_range",
        "type": "double"
      },
      "aux_top_property_limit": {
        "name": "aux_top_property_limit",
        "type": "double"
      }
    },
    "type": "table"
  },
  "AutoplaceSpecificationRestriction": {
    "name": "AutoplaceSpecificationRestriction",
    "doc": "Tile prototype name",
    "attrs": {
      "first": {
        "name": "first",
        "type": "string",
        "doc": "Tile prototype name"
      },
      "second": {
        "name": "second",
        "type": "string",
        "doc": "Second prototype name"
      }
    },
    "type": "table"
  },
  "Resistance": {
    "name": "Resistance",
    "doc": "Absolute damage decrease",
    "attrs": {
      "decrease": {
        "name": "decrease",
        "type": "float",
        "doc": "Absolute damage decrease"
      },
      "percent": {
        "name": "percent",
        "type": "float",
        "doc": "Percentual damage decrease"
      }
    },
    "type": "table"
  },
  "MapGenSize": {
    "name": "MapGenSize",
    "doc": "A floating point number specifying an amount.",
    "attrs": {
      "float": {
        "name": "float",
        "doc": "Specifying a map gen dimension."
      },
      "none": {
        "name": "none",
        "doc": "equivalent to 0."
      },
      "very-low": {
        "name": "very-low",
        "doc": "equivalent to 1/2."
      },
      "very-small": {
        "name": "very-small",
        "doc": "equivalent to 1/2."
      },
      "very-poor": {
        "name": "very-poor",
        "doc": "equivalent to 1/2."
      },
      "low": {
        "name": "low",
        "doc": "equivalent to 1/sqrt(2)."
      },
      "small": {
        "name": "small",
        "doc": "equivalent to 1/sqrt(2)."
      },
      "poor": {
        "name": "poor",
        "doc": "equivalent to 1/sqrt(2)."
      },
      "normal": {
        "name": "normal",
        "doc": "equivalent to 1."
      },
      "medium": {
        "name": "medium",
        "doc": "equivalent to 1."
      },
      "regular": {
        "name": "regular",
        "doc": "equivalent to 1."
      },
      "high": {
        "name": "high",
        "doc": "equivalent to sqrt(2)."
      },
      "big": {
        "name": "big",
        "doc": "equivalent to sqrt(2)."
      },
      "good": {
        "name": "good",
        "doc": "equivalent to sqrt(2)."
      },
      "very-high": {
        "name": "very-high",
        "doc": "equivalent to 2."
      },
      "very-big": {
        "name": "very-big",
        "doc": "equivalent to 2."
      },
      "very-good": {
        "name": "very-good",
        "doc": "equivalent to 2."
      }
    },
    "type": "union"
  },
  "AutoplaceControl": {
    "name": "AutoplaceControl",
    "doc": "For things that are placed as spots such as ores and enemy bases, frequency is generally proportional to number of spots placed per unit area. For continuous features such as forests, frequency is how compressed the probability function is over distance, i.e. the inverse of 'scale' (similar to terrain_segmentation). When the LuaAutoplaceControlPrototype is of the category \"terrain\", then scale is shown in the map generator GUI instead of frequency.",
    "attrs": {
      "frequency": {
        "name": "frequency",
        "type": "MapGenSize",
        "doc": "For things that are placed as spots such as ores and enemy bases, frequency is generally proportional to number of spots placed per unit area. For continuous features such as forests, frequency is how compressed the probability function is over distance, i.e. the inverse of 'scale' (similar to terrain_segmentation). When the LuaAutoplaceControlPrototype is of the category \"terrain\", then scale is shown in the map generator GUI instead of frequency."
      },
      "size": {
        "name": "size",
        "type": "MapGenSize",
        "doc": "For things that are placed as spots, size is proportional to the area of each spot. For continuous features, size affects how much of the map is covered with the thing, and is called 'coverage' in the GUI."
      },
      "richness": {
        "name": "richness",
        "type": "MapGenSize",
        "doc": "Has different effects for different things, but generally affects the 'health' or density of a thing that is placed without affecting where it is placed. For trees, richness affects tree health. For ores, richness multiplies the amount of ore at any given tile in a patch. Metadata about autoplace controls (such as whether or not 'richness' does anything for them) can be found in the LuaAutoplaceControlPrototype by looking up game.autoplace_control_prototypes[(control prototype name)], e.g. game.autoplace_control_prototypes[\"enemy-base\"].richness is false, because enemy base autoplacement doesn't use richness."
      }
    },
    "type": "table"
  },
  "AutoplaceSettings": {
    "name": "AutoplaceSettings",
    "doc": "Whether missing autoplace names for this type should be default enabled.",
    "attrs": {
      "treat_missing_as_default": {
        "name": "treat_missing_as_default",
        "type": "boolean",
        "doc": "Whether missing autoplace names for this type should be default enabled."
      },
      "settings": {
        "name": "settings",
        "type": "dictionary[string → AutoplaceControl]"
      }
    },
    "type": "table"
  },
  "CliffPlacementSettings": {
    "name": "CliffPlacementSettings",
    "doc": "Name of the cliff prototype.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Name of the cliff prototype."
      },
      "cliff_elevation_0": {
        "name": "cliff_elevation_0",
        "type": "float",
        "doc": "Elevation at which the first row of cliffs is placed. The default is 10, and this cannot be set from the map generation GUI."
      },
      "cliff_elevation_interval": {
        "name": "cliff_elevation_interval",
        "type": "float",
        "doc": "Elevation difference between successive rows of cliffs. This is inversely proportional to 'frequency' in the map generation GUI. Specifically, when set from the GUI the value is 40 / frequency."
      },
      "richness": {
        "name": "richness",
        "type": "MapGenSize",
        "doc": "Corresponds to 'continuity' in the GUI. This value is not used directly, but is used by the 'cliffiness' noise expression, which in combination with elevation and the two cliff elevation properties drives cliff placement (cliffs are placed when elevation crosses the elevation contours defined by cliff_elevation_0 and cliff_elevation_interval when 'cliffiness' is greater than 0.5). The default 'cliffiness' expression interprets this value such that larger values result in longer unbroken walls of cliffs, and smaller values (between 0 and 1) result in larger gaps in cliff walls."
      }
    },
    "type": "table"
  },
  "MapGenSettings": {
    "name": "MapGenSettings",
    "doc": "The 'map type' dropdown in the map generation GUI is actually a selector for elevation generator. The base game sets property_expression_names.elevation to \"0_16-elevation\" to reproduce terrain from 0.16 or to \"0_17-island\" for the island preset. If generators are available for other properties, the 'map type' dropdown in the GUI will be renamed to 'elevation' and shown along with selectors for the other selectable properties.",
    "attrs": {
      "terrain_segmentation": {
        "name": "terrain_segmentation",
        "type": "MapGenSize",
        "doc": "The inverse of 'water scale' in the map generator GUI. Lower terrain_segmentation increases the scale of elevation features (lakes, continents, etc). This behavior can be overridden with alternate elevation generators (see property_expression_names, below)."
      },
      "water": {
        "name": "water",
        "type": "MapGenSize",
        "doc": "The equivalent to 'water coverage' in the map generator GUI. Specifically, when this value is non-zero, water_level = 10 * log2 (the value of this field), and the elevation generator subtracts water level from elevation before adding starting lakes. If water is set to 'none', elevation is clamped to a small positive value before adding starting lakes. This behavior can be overridden with alternate elevation generators (see property_expression_names, below)."
      },
      "autoplace_controls": {
        "name": "autoplace_controls",
        "type": "dictionary[string → AutoplaceControl]",
        "doc": "Indexed by autoplace control prototype name."
      },
      "default_enable_all_autoplace_controls": {
        "name": "default_enable_all_autoplace_controls",
        "type": "boolean",
        "doc": "Whether undefined autoplace_controls should fall back to the default controls or not. Defaults to true."
      },
      "autoplace_settings": {
        "name": "autoplace_settings",
        "type": "dictionary[\"entity\" or \"tile\" or \"decorative\" → AutoplaceSettings]",
        "doc": "Each setting in this dictionary maps the string type to the settings for that type."
      },
      "cliff_settings": {
        "name": "cliff_settings",
        "type": "CliffPlacementSettings",
        "doc": "Map generation settings for entities of the type \"cliff\"."
      },
      "seed": {
        "name": "seed",
        "type": "uint",
        "doc": "The random seed used to generated this map."
      },
      "width": {
        "name": "width",
        "type": "uint",
        "doc": "Width in tiles. If 0, the map has 'infinite' width, with the actual limitation being one million tiles in each direction from the center."
      },
      "height": {
        "name": "height",
        "type": "uint",
        "doc": "Height in tiles. If 0, the map has 'infinite' height, with the actual limitation being one million tiles in each direction from the center."
      },
      "starting_area": {
        "name": "starting_area",
        "type": "MapGenSize",
        "doc": "Size of the starting area."
      },
      "starting_points": {
        "name": "starting_points",
        "type": "array[MapPosition]",
        "doc": "Positions of the starting areas."
      },
      "peaceful_mode": {
        "name": "peaceful_mode",
        "type": "boolean",
        "doc": "Whether peaceful mode is enabled for this map."
      },
      "property_expression_names": {
        "name": "property_expression_names",
        "type": "dictionary[string → string]",
        "doc": "Overrides for tile property value generators. Values either name a NamedNoiseExpression or can be literal numbers, stored as strings (e.g. \"5\"). All other controls can be overridden by a property expression names. Notable properties:  - moisture - a value between 0 and 1 that determines whether a tile becomes sandy (low moisture) or grassy (high moisture). - aux - a value between 0 and 1 that determines whether low-moisture tiles become sand or red desert. - temperature - provides a value (vaguely representing degrees Celsius, varying between -20 and 50) that is used (together with moisture and aux) as part of tree and decorative placement. - elevation - tiles values less than zero become water. Cliffs are placed along certain contours according to CliffPlacementSettings. - cliffiness - determines whether (when >0.5) or not (when <0.5) a cliff will be placed at an otherwise suitable (according to CliffPlacementSettings) location. - enemy-base-intensity - a number that is referenced by both enemy-base-frequency and enemy-base-radius. i.e. if this is overridden, enemy base frequency and size will both be affected and do something reasonable. By default, this expression returns a value proportional to distance from any starting point, clamped at about 7. - enemy-base-frequency - a number representing average number of enemy bases per tile for a region, by default in terms of enemy-base-intensity. - enemy-base-radius - a number representing the radius of an enemy base, if one were to be placed on the given tile, by default proportional to a constant plus enemy-base-intensity. Climate controls ('Moisture' and 'Terrain type' at the bottom of the Terrain tab in the map generator GUI) don't have their own dedicated structures in MapGenSettings. Instead, their values are stored as property expression overrides with long names:  - control-setting:moisture:frequency:multiplier - frequency (inverse of scale) multiplier for moisture noise. Default is 1. - control-setting:moisture:bias - global bias for moisture (which normally varies between 0 and 1). Default is 0. - control-setting:aux:frequency:multiplier - frequency (inverse of scale) multiplier for aux (called 'terrain type' in the GUI) noise. Default is 1. - control-setting:aux:bias - global bias for aux/terrain type (which normally varies between 0 and 1). Default is 0. All other MapGenSettings feed into named noise expressions, and therefore placement can be overridden by including the name of a property in this dictionary. The probability and richness functions for placing specific tiles, entities, and decoratives can be overridden by including an entry named {tile|entity|decorative}:(prototype name):{probability|richness}."
      }
    },
    "type": "table"
  },
  "AdvancedMapGenSettings": {
    "name": "AdvancedMapGenSettings",
    "doc": "",
    "attrs": {
      "pollution": {
        "name": "pollution",
        "type": "PollutionMapSettings"
      },
      "enemy_evolution": {
        "name": "enemy_evolution",
        "type": "EnemyEvolutionMapSettings"
      },
      "enemy_expansion": {
        "name": "enemy_expansion",
        "type": "EnemyExpansionMapSettings"
      },
      "difficulty_settings": {
        "name": "difficulty_settings",
        "type": "DifficultySettings"
      }
    },
    "type": "table"
  },
  "MapGenPreset": {
    "name": "MapGenPreset",
    "doc": "The string used to alphabetically sort the presets. It is a simple string that has no additional semantic meaning.",
    "attrs": {
      "order": {
        "name": "order",
        "type": "string",
        "doc": "The string used to alphabetically sort the presets. It is a simple string that has no additional semantic meaning."
      },
      "default": {
        "name": "default",
        "type": "boolean",
        "doc": "Whether this is the preset that is selected by default."
      },
      "basic_settings": {
        "name": "basic_settings",
        "type": "MapGenSettings"
      },
      "advanced_settings": {
        "name": "advanced_settings",
        "type": "AdvancedMapGenSettings"
      }
    },
    "type": "table"
  },
  "SignalID": {
    "name": "SignalID",
    "doc": "Name of the item, fluid or virtual signal.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"item\" or \"fluid\" or \"virtual\""
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Name of the item, fluid or virtual signal."
      }
    },
    "type": "table"
  },
  "Signal": {
    "name": "Signal",
    "doc": "An actual signal transmitted by the network.",
    "attrs": {
      "signal": {
        "name": "signal",
        "type": "SignalID",
        "doc": "ID of the signal."
      },
      "count": {
        "name": "count",
        "type": "int",
        "doc": "Value of the signal."
      }
    },
    "type": "table"
  },
  "UpgradeFilter": {
    "name": "UpgradeFilter",
    "doc": "Name of the item, or entity.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"item\" or \"entity\""
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Name of the item, or entity."
      }
    },
    "type": "table"
  },
  "InfinityInventoryFilter": {
    "name": "InfinityInventoryFilter",
    "doc": "A single filter used by an infinity-filters instance.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Name of the item."
      },
      "count": {
        "name": "count",
        "type": "uint",
        "doc": "The count of the filter."
      },
      "mode": {
        "name": "mode",
        "type": "\"at-least\" or \"at-most\" or \"exactly\"",
        "doc": "Defaults to \"at-least\"."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "doc": "The index of this filter in the filters list. Not required when writing a filter."
      }
    },
    "type": "table"
  },
  "InfinityPipeFilter": {
    "name": "InfinityPipeFilter",
    "doc": "A single filter used by an infinity-pipe type entity.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Name of the fluid."
      },
      "percentage": {
        "name": "percentage",
        "type": "double",
        "doc": "The fill percentage the pipe (for example 0.5 for 50%). Can't be negative."
      },
      "temperature": {
        "name": "temperature",
        "type": "double",
        "doc": "The temperature of the fluid. Defaults to the default/minimum temperature of the fluid."
      },
      "mode": {
        "name": "mode",
        "type": "\"at-least\" or \"at-most\" or \"exactly\" or \"add\" or \"remove\"",
        "doc": "Defaults to \"at-least\"."
      }
    },
    "type": "table"
  },
  "FluidBoxFilter": {
    "name": "FluidBoxFilter",
    "doc": "Fluid prototype name of the filtered fluid.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Fluid prototype name of the filtered fluid."
      },
      "minimum_temperature": {
        "name": "minimum_temperature",
        "type": "double",
        "doc": "The minimum temperature allowed into the fluidbox."
      },
      "maximum_temperature": {
        "name": "maximum_temperature",
        "type": "double",
        "doc": "The maximum temperature allowed into the fluidbox."
      }
    },
    "type": "table"
  },
  "FluidBoxFilterSpec": {
    "name": "FluidBoxFilterSpec",
    "doc": "Fluid prototype name of the filtered fluid.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Fluid prototype name of the filtered fluid."
      },
      "minimum_temperature": {
        "name": "minimum_temperature",
        "type": "double",
        "doc": "The minimum temperature allowed into the fluidbox."
      },
      "maximum_temperature": {
        "name": "maximum_temperature",
        "type": "double",
        "doc": "The maximum temperature allowed into the fluidbox."
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "doc": "Force the filter to be set, regardless of current fluid content."
      }
    },
    "type": "table"
  },
  "HeatSetting": {
    "name": "HeatSetting",
    "doc": "The settings used by a heat-interface type entity.",
    "attrs": {
      "temperature": {
        "name": "temperature",
        "type": "double",
        "doc": "The target temperature. Defaults to the minimum temperature of the heat buffer."
      },
      "mode": {
        "name": "mode",
        "type": "\"at-least\" or \"at-most\" or \"exactly\" or \"add\" or \"remove\"",
        "doc": "Defaults to \"at-least\"."
      }
    },
    "type": "table"
  },
  "HeatConnection": {
    "name": "HeatConnection",
    "doc": "",
    "attrs": {
      "position": {
        "name": "position",
        "type": "Vector"
      },
      "direction": {
        "name": "direction",
        "type": "defines.direction"
      }
    },
    "type": "table"
  },
  "FluidBoxConnection": {
    "name": "FluidBoxConnection",
    "doc": "A definition of a fluidbox connection point.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"input\" or \"output\" or \"input-output\""
      },
      "positions": {
        "name": "positions",
        "type": "array[Vector]",
        "doc": "The 4 cardinal direction connection points for this pipe. This vector is a table with x and y keys instead of an array."
      },
      "max_underground_distance": {
        "name": "max_underground_distance",
        "type": "uint",
        "doc": "The maximum tile distance this underground connection can connect at if this is an underground pipe."
      }
    },
    "type": "table"
  },
  "PipeConnection": {
    "name": "PipeConnection",
    "doc": "A single pipe connection for a given fluidbox.",
    "attrs": {
      "flow_direction": {
        "name": "flow_direction",
        "type": "\"input\" or \"output\" or \"input-output\""
      },
      "connection_type": {
        "name": "connection_type",
        "type": "\"normal\" or \"underground\""
      },
      "position": {
        "name": "position",
        "type": "MapPosition",
        "doc": "The absolute position of this connection within the entity."
      },
      "target_position": {
        "name": "target_position",
        "type": "MapPosition",
        "doc": "The absolute position of the connection's intended target."
      },
      "target": {
        "name": "target",
        "type": "LuaFluidBox",
        "doc": "The connected fluidbox, if any."
      },
      "target_fluidbox_index": {
        "name": "target_fluidbox_index",
        "type": "uint",
        "doc": "The index of the target fluidbox, if any."
      },
      "target_pipe_connection_index": {
        "name": "target_pipe_connection_index",
        "type": "uint",
        "doc": "The index of the target fluidbox pipe connection, if any."
      }
    },
    "type": "table"
  },
  "ArithmeticCombinatorParameters": {
    "name": "ArithmeticCombinatorParameters",
    "doc": "First signal to use in an operation. If not specified, the second argument will be the value of first_constant.",
    "attrs": {
      "first_signal": {
        "name": "first_signal",
        "type": "SignalID",
        "doc": "First signal to use in an operation. If not specified, the second argument will be the value of first_constant."
      },
      "second_signal": {
        "name": "second_signal",
        "type": "SignalID",
        "doc": "Second signal to use in an operation. If not specified, the second argument will be the value of second_constant."
      },
      "first_constant": {
        "name": "first_constant",
        "type": "int",
        "doc": "Constant to use as the first argument of the operation. Has no effect when first_signal is set. Defaults to 0."
      },
      "second_constant": {
        "name": "second_constant",
        "type": "int",
        "doc": "Constant to use as the second argument of the operation. Has no effect when second_signal is set. Defaults to 0."
      },
      "operation": {
        "name": "operation",
        "type": "\"*\" or \"/\" or \"+\" or \"-\" or \"%\" or \"^\" or \"<<\" or \">>\" or \"AND\" or \"OR\" or \"XOR\"",
        "doc": "When not specified, defaults to \"*\"."
      },
      "output_signal": {
        "name": "output_signal",
        "type": "SignalID",
        "doc": "Specifies the signal to output."
      }
    },
    "type": "table"
  },
  "ConstantCombinatorParameters": {
    "name": "ConstantCombinatorParameters",
    "doc": "Signal to emit.",
    "attrs": {
      "signal": {
        "name": "signal",
        "type": "SignalID",
        "doc": "Signal to emit."
      },
      "count": {
        "name": "count",
        "type": "int",
        "doc": "Value of the signal to emit."
      },
      "index": {
        "name": "index",
        "type": "uint",
        "doc": "Index of the constant combinator's slot to set this signal to."
      }
    },
    "type": "table"
  },
  "ComparatorString": {
    "name": "ComparatorString",
    "doc": "A string that specifies how the inputs should be compared",
    "attrs": {
      "=": {
        "name": "=",
        "doc": "\"equal to\""
      },
      ">": {
        "name": ">",
        "doc": "\"greater than\""
      },
      "<": {
        "name": "<",
        "doc": "\"lesser than\""
      },
      "≥": {
        "name": "≥",
        "doc": "\"greater than or equal to\""
      },
      ">=": {
        "name": ">=",
        "doc": "\"greater than or equal to\""
      },
      "≤": {
        "name": "≤",
        "doc": "\"lesser than or equal to\""
      },
      "<=": {
        "name": "<=",
        "doc": "\"lesser than or equal to\""
      },
      "≠": {
        "name": "≠",
        "doc": "\"not equal to\""
      },
      "!=": {
        "name": "!=",
        "doc": "\"not equal to\""
      }
    },
    "type": "union"
  },
  "DeciderCombinatorParameters": {
    "name": "DeciderCombinatorParameters",
    "doc": "Defaults to blank.",
    "attrs": {
      "first_signal": {
        "name": "first_signal",
        "type": "SignalID",
        "doc": "Defaults to blank."
      },
      "second_signal": {
        "name": "second_signal",
        "type": "SignalID",
        "doc": "Second signal to use in an operation, if any. If this is not specified, the second argument to a decider combinator's operation is assumed to be the value of constant."
      },
      "constant": {
        "name": "constant",
        "type": "uint",
        "doc": "Constant to use as the second argument of operation. Defaults to 0."
      },
      "comparator": {
        "name": "comparator",
        "type": "ComparatorString",
        "doc": "Specifies how the inputs should be compared. If not specified, defaults to \"<\"."
      },
      "output_signal": {
        "name": "output_signal",
        "type": "SignalID",
        "doc": "Defaults to blank."
      },
      "copy_count_from_input": {
        "name": "copy_count_from_input",
        "type": "boolean",
        "doc": "Defaults to true. When false, will output a value of 1 for the given output_signal."
      }
    },
    "type": "table"
  },
  "InserterCircuitConditions": {
    "name": "InserterCircuitConditions",
    "doc": "",
    "attrs": {
      "circuit": {
        "name": "circuit",
        "type": "CircuitCondition"
      },
      "logistics": {
        "name": "logistics",
        "type": "CircuitCondition"
      }
    },
    "type": "table"
  },
  "CircuitCondition": {
    "name": "CircuitCondition",
    "doc": "Specifies how the inputs should be compared. If not specified, defaults to \"<\".",
    "attrs": {
      "comparator": {
        "name": "comparator",
        "type": "ComparatorString",
        "doc": "Specifies how the inputs should be compared. If not specified, defaults to \"<\"."
      },
      "first_signal": {
        "name": "first_signal",
        "type": "SignalID",
        "doc": "Defaults to blank"
      },
      "second_signal": {
        "name": "second_signal",
        "type": "SignalID",
        "doc": "What to compare first_signal to. If not specified, first_signal will be compared to constant."
      },
      "constant": {
        "name": "constant",
        "type": "int",
        "doc": "Constant to compare first_signal to. Has no effect when second_signal is set. When neither second_signal nor constant are specified, the effect is as though constant were specified with the value 0."
      }
    },
    "type": "table"
  },
  "CircuitConditionDefinition": {
    "name": "CircuitConditionDefinition",
    "doc": "Whether the condition is currently fulfilled",
    "attrs": {
      "condition": {
        "name": "condition",
        "type": "CircuitCondition"
      },
      "fulfilled": {
        "name": "fulfilled",
        "type": "boolean",
        "doc": "Whether the condition is currently fulfilled"
      }
    },
    "type": "table"
  },
  "CircuitConnectionDefinition": {
    "name": "CircuitConnectionDefinition",
    "doc": "Wire color, either defines.wire_type.red or defines.wire_type.green.",
    "attrs": {
      "wire": {
        "name": "wire",
        "type": "defines.wire_type",
        "doc": "Wire color, either defines.wire_type.red or defines.wire_type.green."
      },
      "target_entity": {
        "name": "target_entity",
        "type": "LuaEntity"
      },
      "source_circuit_id": {
        "name": "source_circuit_id",
        "type": "defines.circuit_connector_id"
      },
      "target_circuit_id": {
        "name": "target_circuit_id",
        "type": "defines.circuit_connector_id"
      }
    },
    "type": "table"
  },
  "CopperConnectionDefinition": {
    "name": "CopperConnectionDefinition",
    "doc": "",
    "attrs": {
      "source_wire_connector": {
        "name": "source_wire_connector",
        "type": "defines.wire_connection_id"
      },
      "target_entity": {
        "name": "target_entity",
        "type": "LuaEntity"
      },
      "target_wire_connector": {
        "name": "target_wire_connector",
        "type": "defines.wire_connection_id"
      }
    },
    "type": "table"
  },
  "WireConnectionDefinition": {
    "name": "WireConnectionDefinition",
    "doc": "The type of wire used.",
    "attrs": {
      "wire": {
        "name": "wire",
        "type": "defines.wire_type",
        "doc": "The type of wire used."
      },
      "target_entity": {
        "name": "target_entity",
        "type": "LuaEntity",
        "doc": "The entity to (dis)connect the source entity with."
      },
      "source_circuit_id": {
        "name": "source_circuit_id",
        "type": "defines.circuit_connector_id",
        "doc": "Mandatory if the source entity has more than one circuit connection using circuit wire."
      },
      "target_circuit_id": {
        "name": "target_circuit_id",
        "type": "defines.circuit_connector_id",
        "doc": "Mandatory if the target entity has more than one circuit connection using circuit wire."
      },
      "source_wire_id": {
        "name": "source_wire_id",
        "type": "defines.wire_connection_id",
        "doc": "Mandatory if the source entity has more than one wire connection using copper wire."
      },
      "target_wire_id": {
        "name": "target_wire_id",
        "type": "defines.wire_connection_id",
        "doc": "Mandatory if the target entity has more than one wire connection using copper wire."
      }
    },
    "type": "table"
  },
  "DragTarget": {
    "name": "DragTarget",
    "doc": "If the wire being dragged is a circuit wire this is the connector id.",
    "attrs": {
      "target_entity": {
        "name": "target_entity",
        "type": "LuaEntity"
      },
      "target_circuit_id": {
        "name": "target_circuit_id",
        "type": "defines.circuit_connector_id",
        "doc": "If the wire being dragged is a circuit wire this is the connector id."
      },
      "target_wire_id": {
        "name": "target_wire_id",
        "type": "defines.wire_connection_id",
        "doc": "If the wire being dragged is copper wire this is the wire id."
      }
    },
    "type": "table"
  },
  "InventoryFilter": {
    "name": "InventoryFilter",
    "doc": "Position of the corresponding filter slot.",
    "attrs": {
      "index": {
        "name": "index",
        "type": "uint",
        "doc": "Position of the corresponding filter slot."
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Item prototype name of the item to filter."
      }
    },
    "type": "table"
  },
  "PlaceAsTileResult": {
    "name": "PlaceAsTileResult",
    "doc": "The tile prototype.",
    "attrs": {
      "result": {
        "name": "result",
        "type": "LuaTilePrototype",
        "doc": "The tile prototype."
      },
      "condition_size": {
        "name": "condition_size",
        "type": "uint"
      },
      "condition": {
        "name": "condition",
        "type": "CollisionMask"
      }
    },
    "type": "table"
  },
  "Command": {
    "name": "Command",
    "doc": "Commands can be given to enemies and unit groups.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "defines.command",
        "doc": "Type of command. The remaining fields depend on the value of this field."
      },
      "target": {
        "name": "target",
        "type": "LuaEntity"
      },
      "distraction": {
        "name": "distraction",
        "type": "defines.distraction",
        "doc": "Defaults to defines.distraction.by_enemy."
      },
      "destination": {
        "name": "destination",
        "type": "MapPosition",
        "doc": "Where to build the base."
      },
      "destination_entity": {
        "name": "destination_entity",
        "type": "LuaEntity",
        "doc": "The entity to path to. Either this or destination need to be specified. If both are, destination_entity is used."
      },
      "pathfind_flags": {
        "name": "pathfind_flags",
        "type": "PathfinderFlags",
        "doc": "Flags that affect pathfinder behavior."
      },
      "radius": {
        "name": "radius",
        "type": "double",
        "doc": "Defaults to 10. Does not apply when wander_in_group is true."
      },
      "structure_type": {
        "name": "structure_type",
        "type": "defines.compound_command",
        "doc": "How the commands should be chained together."
      },
      "commands": {
        "name": "commands",
        "type": "array[Command]",
        "doc": "The sub-commands."
      },
      "group": {
        "name": "group",
        "type": "LuaUnitGroup",
        "doc": "The group whose command to follow."
      },
      "use_group_distraction": {
        "name": "use_group_distraction",
        "type": "boolean",
        "doc": "Whether the unit will use the group distraction or the commands distraction. Defaults to true."
      },
      "wander_in_group": {
        "name": "wander_in_group",
        "type": "boolean",
        "doc": "When commanding a group, defines how the group will wander. When true, the units in the group will wander around inside the group's radius, just like gathering biters. When false, the units will wander as a group, ie they will all walk together in the same random direction. Default is true for groups. Passing true for a single unit is an error."
      },
      "ticks_to_wait": {
        "name": "ticks_to_wait",
        "type": "uint",
        "doc": "Ticks to wander before successfully completing the command. Default is max uint, which means stop forever."
      },
      "from": {
        "name": "from",
        "type": "LuaEntity",
        "doc": "The entity to flee from"
      },
      "ignore_planner": {
        "name": "ignore_planner",
        "type": "boolean",
        "doc": "Whether the units should ignore expansion candidate chunks. When false, they will obey and not build a base in a non-candidate chunk. Defaults to false."
      }
    },
    "type": "table"
  },
  "PathfinderFlags": {
    "name": "PathfinderFlags",
    "doc": "Allows pathing through friendly entities. Defaults to false.",
    "attrs": {
      "allow_destroy_friendly_entities": {
        "name": "allow_destroy_friendly_entities",
        "type": "boolean",
        "doc": "Allows pathing through friendly entities. Defaults to false."
      },
      "allow_paths_through_own_entities": {
        "name": "allow_paths_through_own_entities",
        "type": "boolean",
        "doc": "Allows the pathfinder to path through entities of the same force. Defaults to false."
      },
      "cache": {
        "name": "cache",
        "type": "boolean",
        "doc": "Enables path caching. This can be more efficient, but might fail to respond to changes in the environment. Defaults to true."
      },
      "prefer_straight_paths": {
        "name": "prefer_straight_paths",
        "type": "boolean",
        "doc": "Makes the pathfinder try to path in straight lines. Defaults to false."
      },
      "low_priority": {
        "name": "low_priority",
        "type": "boolean",
        "doc": "Sets lower priority on the path request, meaning it might take longer to find a path at the expense of speeding up others. Defaults to false."
      },
      "no_break": {
        "name": "no_break",
        "type": "boolean",
        "doc": "Makes the pathfinder not break in the middle of processing this pathfind, no matter how much work is needed. Defaults to false."
      }
    },
    "type": "table"
  },
  "UnitSpawnDefinition": {
    "name": "UnitSpawnDefinition",
    "doc": "Prototype name of the unit that would be spawned.",
    "attrs": {
      "unit": {
        "name": "unit",
        "type": "string",
        "doc": "Prototype name of the unit that would be spawned."
      },
      "spawn_points": {
        "name": "spawn_points",
        "type": "array[SpawnPointDefinition]",
        "doc": "The points at which to spawn the unit."
      }
    },
    "type": "table"
  },
  "SpawnPointDefinition": {
    "name": "SpawnPointDefinition",
    "doc": "Evolution factor for which this weight applies.",
    "attrs": {
      "evolution_factor": {
        "name": "evolution_factor",
        "type": "double",
        "doc": "Evolution factor for which this weight applies."
      },
      "weight": {
        "name": "weight",
        "type": "double",
        "doc": "Probability of spawning this unit at this evolution factor."
      }
    },
    "type": "table"
  },
  "ItemStackDefinition": {
    "name": "ItemStackDefinition",
    "doc": "Prototype name of the item the stack holds.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Prototype name of the item the stack holds."
      },
      "count": {
        "name": "count",
        "type": "uint",
        "doc": "Number of items the stack holds. If not specified, defaults to 1."
      },
      "health": {
        "name": "health",
        "type": "float",
        "doc": "Health of the items in the stack. Defaults to 1.0."
      },
      "durability": {
        "name": "durability",
        "type": "double",
        "doc": "Durability of the tool items in the stack."
      },
      "ammo": {
        "name": "ammo",
        "type": "double",
        "doc": "Amount of ammo in the ammo items in the stack."
      },
      "tags": {
        "name": "tags",
        "type": "array[string]",
        "doc": "Tags of the items with tags in the stack."
      }
    },
    "type": "table"
  },
  "SimpleItemStack": {
    "name": "SimpleItemStack",
    "doc": "An item stack may be specified in one of two ways.",
    "attrs": {
      "string": {
        "name": "string",
        "doc": "The name of the item, which represents a full stack of that item."
      },
      "ItemStackDefinition": {
        "name": "ItemStackDefinition",
        "doc": "The detailed definition of an item stack."
      }
    },
    "type": "union"
  },
  "FluidIdentification": {
    "name": "FluidIdentification",
    "doc": "A fluid may be specified in one of three ways.",
    "attrs": {
      "string": {
        "name": "string",
        "doc": "The fluid name."
      },
      "LuaFluidPrototype": {
        "name": "LuaFluidPrototype",
        "doc": "The fluid prototype."
      },
      "Fluid": {
        "name": "Fluid",
        "doc": "The fluid."
      }
    },
    "type": "union"
  },
  "ForceIdentification": {
    "name": "ForceIdentification",
    "doc": "A force may be specified in one of three ways.",
    "attrs": {
      "uint8": {
        "name": "uint8",
        "doc": "The force index."
      },
      "string": {
        "name": "string",
        "doc": "The force name."
      },
      "LuaForce": {
        "name": "LuaForce",
        "doc": "A reference to LuaForce may be passed directly."
      }
    },
    "type": "union"
  },
  "TechnologyIdentification": {
    "name": "TechnologyIdentification",
    "doc": "A technology may be specified in one of three ways.",
    "attrs": {
      "string": {
        "name": "string",
        "doc": "The technology name."
      },
      "LuaTechnology": {
        "name": "LuaTechnology",
        "doc": "A reference to LuaTechnology may be passed directly."
      },
      "LuaTechnologyPrototype": {
        "name": "LuaTechnologyPrototype",
        "doc": "A reference to LuaTechnologyPrototype may be passed directly."
      }
    },
    "type": "union"
  },
  "SurfaceIdentification": {
    "name": "SurfaceIdentification",
    "doc": "A surface may be specified in one of three ways.",
    "attrs": {
      "uint": {
        "name": "uint",
        "doc": "It will be the index of the surface. nauvis has index 1, the first surface-created surface will have index 2 and so on."
      },
      "string": {
        "name": "string",
        "doc": "It will be the surface name. E.g. \"nauvis\"."
      },
      "LuaSurface": {
        "name": "LuaSurface",
        "doc": "A reference to LuaSurface may be passed directly."
      }
    },
    "type": "union"
  },
  "PlayerIdentification": {
    "name": "PlayerIdentification",
    "doc": "A player may be specified in one of three ways.",
    "attrs": {
      "uint": {
        "name": "uint",
        "doc": "The player index."
      },
      "string": {
        "name": "string",
        "doc": "The player name."
      },
      "LuaPlayer": {
        "name": "LuaPlayer",
        "doc": "A reference to LuaPlayer may be passed directly."
      }
    },
    "type": "union"
  },
  "ItemStackIdentification": {
    "name": "ItemStackIdentification",
    "doc": "An item may be specified in one of two ways.",
    "attrs": {
      "SimpleItemStack": {
        "name": "SimpleItemStack"
      },
      "LuaItemStack": {
        "name": "LuaItemStack"
      }
    },
    "type": "union"
  },
  "EntityPrototypeIdentification": {
    "name": "EntityPrototypeIdentification",
    "doc": "An entity prototype may be specified in one of three ways.",
    "attrs": {
      "LuaEntity": {
        "name": "LuaEntity",
        "doc": "The entity."
      },
      "LuaEntityPrototype": {
        "name": "LuaEntityPrototype",
        "doc": "The entity prototype."
      },
      "string": {
        "name": "string",
        "doc": "The prototype name."
      }
    },
    "type": "union"
  },
  "ItemPrototypeIdentification": {
    "name": "ItemPrototypeIdentification",
    "doc": "An item prototype may be specified in one of three ways.",
    "attrs": {
      "LuaItemStack": {
        "name": "LuaItemStack",
        "doc": "The item."
      },
      "LuaItemPrototype": {
        "name": "LuaItemPrototype",
        "doc": "The item prototype."
      },
      "string": {
        "name": "string",
        "doc": "The prototype name."
      }
    },
    "type": "union"
  },
  "WaitConditionType": {
    "name": "WaitConditionType",
    "doc": "Type of a WaitCondition.",
    "attrs": {
      "time": {
        "name": "time"
      },
      "full": {
        "name": "full"
      },
      "empty": {
        "name": "empty"
      },
      "item_count": {
        "name": "item_count"
      },
      "circuit": {
        "name": "circuit"
      },
      "inactivity": {
        "name": "inactivity"
      },
      "robots_inactive": {
        "name": "robots_inactive"
      },
      "fluid_count": {
        "name": "fluid_count"
      },
      "passenger_present": {
        "name": "passenger_present"
      },
      "passenger_not_present": {
        "name": "passenger_not_present"
      }
    },
    "type": "union"
  },
  "WaitCondition": {
    "name": "WaitCondition",
    "doc": "Specifies how this condition is to be compared with the preceding conditions in the corresponding wait_conditions array.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "WaitConditionType"
      },
      "compare_type": {
        "name": "compare_type",
        "type": "\"and\" or \"or\"",
        "doc": "Specifies how this condition is to be compared with the preceding conditions in the corresponding wait_conditions array."
      },
      "ticks": {
        "name": "ticks",
        "type": "uint",
        "doc": "Number of ticks to wait when type is \"time\", or number of ticks of inactivity when type is \"inactivity\"."
      },
      "condition": {
        "name": "condition",
        "type": "CircuitCondition",
        "doc": "Only present when type is \"item_count\", \"circuit\" or \"fluid_count\", and a circuit condition is configured."
      }
    },
    "type": "table"
  },
  "TrainScheduleRecord": {
    "name": "TrainScheduleRecord",
    "doc": "Name of the station.",
    "attrs": {
      "station": {
        "name": "station",
        "type": "string",
        "doc": "Name of the station."
      },
      "rail": {
        "name": "rail",
        "type": "LuaEntity",
        "doc": "Rail to path to. Ignored if station is present."
      },
      "rail_direction": {
        "name": "rail_direction",
        "type": "defines.rail_direction",
        "doc": "When a train is allowed to reach rail target from any direction it will be nil. If rail has to be reached from specific direction, this value allows to choose the direction. This value corresponds to LuaEntity::connected_rail_direction of a TrainStop."
      },
      "wait_conditions": {
        "name": "wait_conditions",
        "type": "array[WaitCondition]"
      },
      "temporary": {
        "name": "temporary",
        "type": "boolean",
        "doc": "Only present when the station is temporary, the value is then always true."
      }
    },
    "type": "table"
  },
  "TrainSchedule": {
    "name": "TrainSchedule",
    "doc": "Index of the currently active record",
    "attrs": {
      "current": {
        "name": "current",
        "type": "uint",
        "doc": "Index of the currently active record"
      },
      "records": {
        "name": "records",
        "type": "array[TrainScheduleRecord]"
      }
    },
    "type": "table"
  },
  "TargetType": {
    "name": "TargetType",
    "doc": "Target type of an AmmoType.",
    "attrs": {
      "entity": {
        "name": "entity",
        "doc": "Fires at an entity."
      },
      "position": {
        "name": "position",
        "doc": "Fires directly at a position."
      },
      "direction": {
        "name": "direction",
        "doc": "Fires in a direction."
      }
    },
    "type": "union"
  },
  "AmmoType": {
    "name": "AmmoType",
    "doc": "When true, the gun will be able to shoot even when the target is out of range. Only applies when target_type is position. The gun will fire at the maximum range in the direction of the target position. Defaults to false.",
    "attrs": {
      "action": {
        "name": "action",
        "type": "array[TriggerItem]"
      },
      "target_type": {
        "name": "target_type",
        "type": "TargetType"
      },
      "clamp_position": {
        "name": "clamp_position",
        "type": "boolean",
        "doc": "When true, the gun will be able to shoot even when the target is out of range. Only applies when target_type is position. The gun will fire at the maximum range in the direction of the target position. Defaults to false."
      },
      "category": {
        "name": "category",
        "type": "string",
        "doc": "Ammo category of this ammo."
      },
      "energy_consumption": {
        "name": "energy_consumption",
        "type": "double",
        "doc": "Energy consumption of a single shot, if applicable. Defaults to 0."
      },
      "range_modifier": {
        "name": "range_modifier",
        "type": "double"
      },
      "cooldown_modifier": {
        "name": "cooldown_modifier",
        "type": "double"
      },
      "consumption_modifier": {
        "name": "consumption_modifier",
        "type": "double"
      }
    },
    "type": "table"
  },
  "BeamTarget": {
    "name": "BeamTarget",
    "doc": "The target entity.",
    "attrs": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity",
        "doc": "The target entity."
      },
      "position": {
        "name": "position",
        "type": "MapPosition",
        "doc": "The target position."
      }
    },
    "type": "table"
  },
  "RidingState": {
    "name": "RidingState",
    "doc": "",
    "attrs": {
      "acceleration": {
        "name": "acceleration",
        "type": "defines.riding.acceleration"
      },
      "direction": {
        "name": "direction",
        "type": "defines.riding.direction"
      }
    },
    "type": "table"
  },
  "SpritePath": {
    "name": "SpritePath",
    "doc": "It can be either the name of a SpritePrototype defined in the data stage, or a path in form \"type/name\".",
    "attrs": {},
    "type": "string"
  },
  "SoundPath": {
    "name": "SoundPath",
    "doc": "It can be either the name of a SoundPrototype defined in the data stage, or a path in the form \"type/name\". The latter option can be sorted into three categories.",
    "attrs": {},
    "type": "string"
  },
  "ModuleEffectValue": {
    "name": "ModuleEffectValue",
    "doc": "The percentual increase of the attribute. A value of 0.6 means a 60% increase.",
    "attrs": {
      "bonus": {
        "name": "bonus",
        "type": "float",
        "doc": "The percentual increase of the attribute. A value of 0.6 means a 60% increase."
      }
    },
    "type": "table"
  },
  "ModuleEffects": {
    "name": "ModuleEffects",
    "doc": "",
    "attrs": {
      "consumption": {
        "name": "consumption",
        "type": "ModuleEffectValue"
      },
      "speed": {
        "name": "speed",
        "type": "ModuleEffectValue"
      },
      "productivity": {
        "name": "productivity",
        "type": "ModuleEffectValue"
      },
      "pollution": {
        "name": "pollution",
        "type": "ModuleEffectValue"
      }
    },
    "type": "table"
  },
  "EntityPrototypeFlags": {
    "name": "EntityPrototypeFlags",
    "doc": "A set of flags. Active flags are in the dictionary as true, while inactive flags aren't present at all.",
    "attrs": {},
    "type": "dictionary[EntityPrototypeFlag → true]"
  },
  "EntityPrototypeFlag": {
    "name": "EntityPrototypeFlag",
    "doc": "A string specifying an entity prototype flag.",
    "attrs": {
      "not-rotatable": {
        "name": "not-rotatable",
        "doc": "Prevents the entity from being rotated before or after placement."
      },
      "placeable-neutral": {
        "name": "placeable-neutral",
        "doc": "Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force."
      },
      "placeable-player": {
        "name": "placeable-player",
        "doc": "Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force."
      },
      "placeable-enemy": {
        "name": "placeable-enemy",
        "doc": "Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force."
      },
      "placeable-off-grid": {
        "name": "placeable-off-grid",
        "doc": "Determines whether the entity needs to be aligned with the invisible grid within the world. Most entities are confined in this way, with a few exceptions such as trees and land mines."
      },
      "player-creation": {
        "name": "player-creation",
        "doc": "Makes it possible to blueprint, deconstruct, and repair the entity (which can be turned off again using the specific flags). Makes it possible for the biter AI to target the entity as a distraction. Enables dust to automatically be created when building the entity. If the entity does not have a map_color set, this flag makes the entity appear on the map with the default color specified by the UtilityConstants."
      },
      "building-direction-8-way": {
        "name": "building-direction-8-way",
        "doc": "Uses 45 degree angle increments when selecting direction."
      },
      "filter-directions": {
        "name": "filter-directions",
        "doc": "Used to automatically detect the proper direction of the entity if possible. Used by the pump, train stop, and train signal by default."
      },
      "fast-replaceable-no-build-while-moving": {
        "name": "fast-replaceable-no-build-while-moving",
        "doc": "Fast replace will not apply when building while moving."
      },
      "breaths-air": {
        "name": "breaths-air",
        "doc": "Used to specify that the entity breathes air, and is thus affected by poison."
      },
      "not-repairable": {
        "name": "not-repairable",
        "doc": "Used to specify that the entity can not be 'healed' by repair packs."
      },
      "not-on-map": {
        "name": "not-on-map",
        "doc": "Prevents the entity from being drawn on the map."
      },
      "not-deconstructable": {
        "name": "not-deconstructable",
        "doc": "Prevents the entity from being deconstructed."
      },
      "not-blueprintable": {
        "name": "not-blueprintable",
        "doc": "Prevents the entity from being part of a blueprint."
      },
      "hidden": {
        "name": "hidden",
        "doc": "Hides the entity from the bonus GUI and from the \"made in\"-property of recipe tooltips."
      },
      "hide-alt-info": {
        "name": "hide-alt-info",
        "doc": "Hides the alt-info of this entity when in alt-mode."
      },
      "fast-replaceable-no-cross-type-while-moving": {
        "name": "fast-replaceable-no-cross-type-while-moving",
        "doc": "Does not fast replace this entity over other entity types when building while moving."
      },
      "no-gap-fill-while-building": {
        "name": "no-gap-fill-while-building"
      },
      "not-flammable": {
        "name": "not-flammable",
        "doc": "Does not apply fire stickers to the entity."
      },
      "no-automated-item-removal": {
        "name": "no-automated-item-removal",
        "doc": "Prevents inserters and loaders from taking items from this entity."
      },
      "no-automated-item-insertion": {
        "name": "no-automated-item-insertion",
        "doc": "Prevents inserters and loaders from inserting items into this entity."
      },
      "no-copy-paste": {
        "name": "no-copy-paste",
        "doc": "Prevents the entity from being copy-pasted."
      },
      "not-selectable-in-game": {
        "name": "not-selectable-in-game",
        "doc": "Disallows selection of the entity even when a selection box is specified for other reasons. For example, selection boxes are used to determine the size of outlines to be shown when highlighting entities inside electric pole ranges."
      },
      "not-upgradable": {
        "name": "not-upgradable",
        "doc": "Prevents the entity from being selected by the upgrade planner."
      },
      "not-in-kill-statistics": {
        "name": "not-in-kill-statistics",
        "doc": "Prevents the entity from being shown in the kill statistics."
      },
      "not-in-made-in": {
        "name": "not-in-made-in",
        "doc": "Prevents the entity from being shown in the \"made in\" list in recipe tooltips."
      }
    },
    "type": "union"
  },
  "ItemPrototypeFlags": {
    "name": "ItemPrototypeFlags",
    "doc": "A set of flags. Active flags are in the dictionary as true, while inactive flags aren't present at all.",
    "attrs": {},
    "type": "dictionary[ItemPrototypeFlag → true]"
  },
  "ItemPrototypeFlag": {
    "name": "ItemPrototypeFlag",
    "doc": "A string specifying an item prototype flag.",
    "attrs": {
      "draw-logistic-overlay": {
        "name": "draw-logistic-overlay",
        "doc": "Determines whether the logistics areas of roboports should be drawn when holding this item. Used by the deconstruction planner by default."
      },
      "hidden": {
        "name": "hidden",
        "doc": "Hides the item in the logistic requests and filters GUIs (among others)."
      },
      "always-show": {
        "name": "always-show",
        "doc": "Always shows the item in the logistic requests and filters GUIs (among others) even when the recipe for that item is locked."
      },
      "hide-from-bonus-gui": {
        "name": "hide-from-bonus-gui",
        "doc": "Hides the item from the bonus GUI."
      },
      "hide-from-fuel-tooltip": {
        "name": "hide-from-fuel-tooltip",
        "doc": "Hides the item from the tooltip that's shown when hovering over a burner inventory."
      },
      "not-stackable": {
        "name": "not-stackable",
        "doc": "Prevents the item from being stacked. It also prevents the item from stacking in assembling machine input slots, which can otherwise exceed the item stack size if required by the recipe. Additionally, the item does not show an item count when in the cursor."
      },
      "can-extend-inventory": {
        "name": "can-extend-inventory",
        "doc": "Makes the item act as an extension to the inventory that it is placed in. Only has an effect for items with inventory."
      },
      "primary-place-result": {
        "name": "primary-place-result",
        "doc": "Makes construction bots prefer this item when building the entity specified by its place_result."
      },
      "mod-openable": {
        "name": "mod-openable",
        "doc": "Allows the item to be opened by the player, firing the on_mod_item_opened event. Only has an effect for selection tool items."
      },
      "only-in-cursor": {
        "name": "only-in-cursor",
        "doc": "Makes it so the item is deleted when clearing the cursor, instead of being put into the player's inventory. The copy-paste tools use this by default, for example."
      },
      "spawnable": {
        "name": "spawnable",
        "doc": "Allows the item to be spawned by a quickbar shortcut or custom input."
      }
    },
    "type": "union"
  },
  "CollisionMaskLayer": {
    "name": "CollisionMaskLayer",
    "doc": "A string specifying a collision mask layer.",
    "attrs": {
      "ground-tile": {
        "name": "ground-tile"
      },
      "water-tile": {
        "name": "water-tile"
      },
      "resource-layer": {
        "name": "resource-layer"
      },
      "doodad-layer": {
        "name": "doodad-layer"
      },
      "floor-layer": {
        "name": "floor-layer"
      },
      "item-layer": {
        "name": "item-layer"
      },
      "ghost-layer": {
        "name": "ghost-layer"
      },
      "object-layer": {
        "name": "object-layer"
      },
      "player-layer": {
        "name": "player-layer"
      },
      "train-layer": {
        "name": "train-layer"
      },
      "rail-layer": {
        "name": "rail-layer"
      },
      "transport-belt-layer": {
        "name": "transport-belt-layer"
      },
      "not-setup": {
        "name": "not-setup"
      }
    },
    "type": "union"
  },
  "CollisionMask": {
    "name": "CollisionMask",
    "doc": "A set of flags. Active flags are in the dictionary as true, while inactive flags aren't present at all.",
    "attrs": {},
    "type": "dictionary[CollisionMaskLayer → true]"
  },
  "CollisionMaskWithFlags": {
    "name": "CollisionMaskWithFlags",
    "doc": "A CollisionMask which also includes any flags this mask has.",
    "attrs": {
      "CollisionMaskLayer": {
        "name": "CollisionMaskLayer"
      },
      "not-colliding-with-itself": {
        "name": "not-colliding-with-itself",
        "doc": "Any two entities that both have this option enabled on their prototype and have an identical collision mask layers list will not collide. Other collision mask options are not included in the identical layer list check. This does mean that two different prototypes with the same collision mask layers and this option enabled will not collide."
      },
      "consider-tile-transitions": {
        "name": "consider-tile-transitions",
        "doc": "Uses the prototypes position rather than its collision box when doing collision checks with tile prototypes. Allows the prototype to overlap colliding tiles up until its center point. This is only respected for character movement and cars driven by players."
      },
      "colliding-with-tiles-only": {
        "name": "colliding-with-tiles-only",
        "doc": "Any prototype with this collision option will only be checked for collision with other prototype's collision masks if they are a tile."
      }
    },
    "type": "dictionary[union → true]"
  },
  "TriggerTargetMask": {
    "name": "TriggerTargetMask",
    "doc": "A set of trigger target masks.",
    "attrs": {},
    "type": "dictionary[string → boolean]"
  },
  "CircularParticleCreationSpecification": {
    "name": "CircularParticleCreationSpecification",
    "doc": "Name of the LuaEntityPrototype.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "Name of the LuaEntityPrototype."
      },
      "direction": {
        "name": "direction",
        "type": "float"
      },
      "direction_deviation": {
        "name": "direction_deviation",
        "type": "float"
      },
      "speed": {
        "name": "speed",
        "type": "float"
      },
      "speed_deviation": {
        "name": "speed_deviation",
        "type": "float"
      },
      "starting_frame_speed": {
        "name": "starting_frame_speed",
        "type": "float"
      },
      "starting_frame_speed_deviation": {
        "name": "starting_frame_speed_deviation",
        "type": "float"
      },
      "height": {
        "name": "height",
        "type": "float"
      },
      "height_deviation": {
        "name": "height_deviation",
        "type": "float"
      },
      "vertical_speed": {
        "name": "vertical_speed",
        "type": "float"
      },
      "vertical_speed_deviation": {
        "name": "vertical_speed_deviation",
        "type": "float"
      },
      "center": {
        "name": "center",
        "type": "Vector",
        "doc": "This vector is a table with x and y keys instead of an array."
      },
      "creation_distance": {
        "name": "creation_distance",
        "type": "double"
      },
      "creation_distance_orientation": {
        "name": "creation_distance_orientation",
        "type": "double"
      },
      "use_source_position": {
        "name": "use_source_position",
        "type": "boolean"
      }
    },
    "type": "table"
  },
  "CircularProjectileCreationSpecification": {
    "name": "CircularProjectileCreationSpecification",
    "doc": "",
    "attrs": {
      "[1]": {
        "name": "[1]",
        "type": "RealOrientation"
      },
      "[2]": {
        "name": "[2]",
        "type": "Vector"
      }
    },
    "type": "tuple"
  },
  "AttackParameterFluid": {
    "name": "AttackParameterFluid",
    "doc": "Name of the LuaFluidPrototype.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "string",
        "doc": "Name of the LuaFluidPrototype."
      },
      "damage_modifier": {
        "name": "damage_modifier",
        "type": "double",
        "doc": "Multiplier applied to the damage of an attack."
      }
    },
    "type": "table"
  },
  "AttackParameters": {
    "name": "AttackParameters",
    "doc": "The type of AttackParameter.",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"projectile\" or \"stream\" or \"beam\"",
        "doc": "The type of AttackParameter."
      },
      "range": {
        "name": "range",
        "type": "float",
        "doc": "Maximum range of attack."
      },
      "min_range": {
        "name": "min_range",
        "type": "float",
        "doc": "Minimum range of attack. Used with flamethrower turrets to prevent self-immolation."
      },
      "range_mode": {
        "name": "range_mode",
        "type": "\"center-to-center\" or \"bounding-box-to-bounding-box\"",
        "doc": "Defines how the range is determined."
      },
      "fire_penalty": {
        "name": "fire_penalty",
        "type": "float",
        "doc": "When searching for the nearest enemy to attack, fire_penalty is added to the enemy's distance if they are on fire."
      },
      "rotate_penalty": {
        "name": "rotate_penalty",
        "type": "float",
        "doc": "When searching for an enemy to attack, a higher rotate_penalty will discourage targeting enemies that would take longer to turn to face."
      },
      "health_penalty": {
        "name": "health_penalty",
        "type": "float",
        "doc": "When searching for an enemy to attack, a higher health_penalty will discourage targeting enemies with high health. A negative penalty will do the opposite."
      },
      "min_attack_distance": {
        "name": "min_attack_distance",
        "type": "float",
        "doc": "If less than range, the entity will choose a random distance between range and min_attack_distance and attack from that distance. Used for spitters."
      },
      "turn_range": {
        "name": "turn_range",
        "type": "float",
        "doc": "The arc that the entity can attack in as a fraction of a circle. A value of 1 means the full 360 degrees."
      },
      "damage_modifier": {
        "name": "damage_modifier",
        "type": "float",
        "doc": "Multiplier applied to the damage of an attack."
      },
      "ammo_consumption_modifier": {
        "name": "ammo_consumption_modifier",
        "type": "float",
        "doc": "Multiplier applied to the ammo consumption of an attack."
      },
      "cooldown": {
        "name": "cooldown",
        "type": "float",
        "doc": "Minimum amount of ticks between shots. If this is less than 1, multiple shots can be performed per tick."
      },
      "warmup": {
        "name": "warmup",
        "type": "uint",
        "doc": "Number of ticks it takes for the weapon to actually shoot after it has been ordered to do so."
      },
      "movement_slow_down_factor": {
        "name": "movement_slow_down_factor",
        "type": "double"
      },
      "movement_slow_down_cooldown": {
        "name": "movement_slow_down_cooldown",
        "type": "float"
      },
      "ammo_type": {
        "name": "ammo_type",
        "type": "AmmoType"
      },
      "ammo_categories": {
        "name": "ammo_categories",
        "type": "array[string]",
        "doc": "List of the names of compatible LuaAmmoCategoryPrototypes."
      },
      "projectile_center": {
        "name": "projectile_center",
        "type": "Vector"
      },
      "projectile_creation_distance": {
        "name": "projectile_creation_distance",
        "type": "float"
      },
      "projectile_orientation_offset": {
        "name": "projectile_orientation_offset",
        "type": "float"
      },
      "shell_particle": {
        "name": "shell_particle",
        "type": "CircularParticleCreationSpecification"
      },
      "projectile_creation_parameters": {
        "name": "projectile_creation_parameters",
        "type": "array[CircularProjectileCreationSpecification]"
      },
      "gun_barrel_length": {
        "name": "gun_barrel_length",
        "type": "float"
      },
      "gun_center_shift": {
        "name": "gun_center_shift",
        "type": "GunShift4Way"
      },
      "fluid_consumption": {
        "name": "fluid_consumption",
        "type": "float"
      },
      "fluids": {
        "name": "fluids",
        "type": "array[AttackParameterFluid]"
      }
    },
    "type": "table"
  },
  "GunShift4Way": {
    "name": "GunShift4Way",
    "doc": "",
    "attrs": {
      "north": {
        "name": "north",
        "type": "Vector"
      },
      "east": {
        "name": "east",
        "type": "Vector"
      },
      "south": {
        "name": "south",
        "type": "Vector"
      },
      "west": {
        "name": "west",
        "type": "Vector"
      }
    },
    "type": "table"
  },
  "CapsuleAction": {
    "name": "CapsuleAction",
    "doc": "",
    "attrs": {
      "type": {
        "name": "type",
        "type": "\"throw\" or \"equipment-remote\" or \"use-on-self\" or \"artillery-remote\" or \"destroy-cliffs\""
      },
      "attack_parameters": {
        "name": "attack_parameters",
        "type": "AttackParameters"
      },
      "uses_stack": {
        "name": "uses_stack",
        "type": "boolean",
        "doc": "Whether using the capsule consumes an item from the stack."
      },
      "equipment": {
        "name": "equipment",
        "type": "string",
        "doc": "Name of the LuaEquipmentPrototype."
      },
      "flare": {
        "name": "flare",
        "type": "string",
        "doc": "Name of the flare prototype."
      },
      "radius": {
        "name": "radius",
        "type": "float"
      },
      "timeout": {
        "name": "timeout",
        "type": "uint"
      }
    },
    "type": "table"
  },
  "SelectionModeFlags": {
    "name": "SelectionModeFlags",
    "doc": "A set of flags on a selection tool that define how entities and tiles are selected. Active flags are in the dictionary as true, while inactive flags aren't present at all.",
    "attrs": {
      "blueprint": {
        "name": "blueprint",
        "doc": "Selects entities and tiles as if selecting them for a blueprint."
      },
      "deconstruct": {
        "name": "deconstruct",
        "doc": "Selects entities and tiles as if selecting them for deconstruction."
      },
      "cancel-deconstruct": {
        "name": "cancel-deconstruct",
        "doc": "Selects entities and tiles as if selecting them for deconstruction cancellation."
      },
      "items": {
        "name": "items",
        "doc": "Selects items on the ground."
      },
      "trees": {
        "name": "trees",
        "doc": "Selects trees."
      },
      "buildable-type": {
        "name": "buildable-type",
        "doc": "Selects entities which are considered a building, plus landmines."
      },
      "nothing": {
        "name": "nothing",
        "doc": "Selects no entities or tiles, but is useful to select an area."
      },
      "items-to-place": {
        "name": "items-to-place",
        "doc": "Selects entities and tiles that can be built by an item."
      },
      "any-entity": {
        "name": "any-entity",
        "doc": "Selects all entities."
      },
      "any-tile": {
        "name": "any-tile",
        "doc": "Selects all tiles."
      },
      "same-force": {
        "name": "same-force",
        "doc": "Selects entities with the same force as the selecting player."
      },
      "not-same-force": {
        "name": "not-same-force",
        "doc": "Selects entities with a different force as the selecting player."
      },
      "friend": {
        "name": "friend",
        "doc": "Selects entities from a friendly force."
      },
      "enemy": {
        "name": "enemy",
        "doc": "Selects entities from an enemy force."
      },
      "upgrade": {
        "name": "upgrade",
        "doc": "Selects entities as if selecting them for upgrading."
      },
      "cancel-upgrade": {
        "name": "cancel-upgrade",
        "doc": "Selects entities as if selecting them for upgrade cancellation."
      },
      "downgrade": {
        "name": "downgrade",
        "doc": "Selects entities as if selecting them for downgrading."
      },
      "entity-with-health": {
        "name": "entity-with-health",
        "doc": "Selects entities that are entities with health."
      },
      "entity-with-force": {
        "name": "entity-with-force",
        "doc": "Deprecated. Replaced by is-military-target."
      },
      "is-military-target": {
        "name": "is-military-target",
        "doc": "Selects entities that are military targets."
      },
      "entity-with-owner": {
        "name": "entity-with-owner",
        "doc": "Selects entities that are entities with owner."
      },
      "avoid-rolling-stock": {
        "name": "avoid-rolling-stock",
        "doc": "Selects entities that are not rolling-stocks."
      },
      "entity-ghost": {
        "name": "entity-ghost",
        "doc": "Selects entities that are entity-ghosts."
      },
      "tile-ghost": {
        "name": "tile-ghost",
        "doc": "Selects entities that are tile-ghosts."
      }
    },
    "type": "dictionary[union → true]"
  },
  "LogisticFilter": {
    "name": "LogisticFilter",
    "doc": "The index this filter applies to.",
    "attrs": {
      "index": {
        "name": "index",
        "type": "uint",
        "doc": "The index this filter applies to."
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The item name for this filter."
      },
      "count": {
        "name": "count",
        "type": "uint",
        "doc": "The count for this filter."
      }
    },
    "type": "table"
  },
  "LogisticsNetworkSupplyCounts": {
    "name": "LogisticsNetworkSupplyCounts",
    "doc": "Number of available items in the storage members.",
    "attrs": {
      "storage": {
        "name": "storage",
        "type": "uint",
        "doc": "Number of available items in the storage members."
      },
      "passive-provider": {
        "name": "passive-provider",
        "type": "uint",
        "doc": "Number of available items in the passive provider members."
      },
      "buffer": {
        "name": "buffer",
        "type": "uint",
        "doc": "Number of available items in the buffer members."
      },
      "active-provider": {
        "name": "active-provider",
        "type": "uint",
        "doc": "Number of available items in the active provider members."
      }
    },
    "type": "table"
  },
  "LogisticsNetworkSupplyPoints": {
    "name": "LogisticsNetworkSupplyPoints",
    "doc": "",
    "attrs": {
      "storage": {
        "name": "storage",
        "type": "array[LuaLogisticPoint]"
      },
      "passive-provider": {
        "name": "passive-provider",
        "type": "array[LuaLogisticPoint]"
      },
      "buffer": {
        "name": "buffer",
        "type": "array[LuaLogisticPoint]"
      },
      "active-provider": {
        "name": "active-provider",
        "type": "array[LuaLogisticPoint]"
      }
    },
    "type": "table"
  },
  "ModSetting": {
    "name": "ModSetting",
    "doc": "The value of the mod setting. The type depends on the kind of setting.",
    "attrs": {
      "value": {
        "name": "value",
        "type": "int or double or boolean or string or Color",
        "doc": "The value of the mod setting. The type depends on the kind of setting."
      }
    },
    "type": "table"
  },
  "AnyBasic": {
    "name": "AnyBasic",
    "doc": "Any basic type (string, number, boolean) or table.",
    "attrs": {},
    "type": "string or boolean or number or table"
  },
  "Any": {
    "name": "Any",
    "doc": "Any basic type (string, number, boolean), table, or LuaObject.",
    "attrs": {},
    "type": "string or boolean or number or table or LuaObject"
  },
  "ProgrammableSpeakerParameters": {
    "name": "ProgrammableSpeakerParameters",
    "doc": "",
    "attrs": {
      "playback_volume": {
        "name": "playback_volume",
        "type": "double"
      },
      "playback_globally": {
        "name": "playback_globally",
        "type": "boolean"
      },
      "allow_polyphony": {
        "name": "allow_polyphony",
        "type": "boolean"
      }
    },
    "type": "table"
  },
  "ProgrammableSpeakerAlertParameters": {
    "name": "ProgrammableSpeakerAlertParameters",
    "doc": "",
    "attrs": {
      "show_alert": {
        "name": "show_alert",
        "type": "boolean"
      },
      "show_on_map": {
        "name": "show_on_map",
        "type": "boolean"
      },
      "icon_signal_id": {
        "name": "icon_signal_id",
        "type": "SignalID"
      },
      "alert_message": {
        "name": "alert_message",
        "type": "string"
      }
    },
    "type": "table"
  },
  "ProgrammableSpeakerCircuitParameters": {
    "name": "ProgrammableSpeakerCircuitParameters",
    "doc": "",
    "attrs": {
      "signal_value_is_pitch": {
        "name": "signal_value_is_pitch",
        "type": "boolean"
      },
      "instrument_id": {
        "name": "instrument_id",
        "type": "uint"
      },
      "note_id": {
        "name": "note_id",
        "type": "uint"
      }
    },
    "type": "table"
  },
  "ProgrammableSpeakerInstrument": {
    "name": "ProgrammableSpeakerInstrument",
    "doc": "",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string"
      },
      "notes": {
        "name": "notes",
        "type": "array[string]"
      }
    },
    "type": "table"
  },
  "Alignment": {
    "name": "Alignment",
    "doc": "A string that specifies where a GUI element should be.",
    "attrs": {
      "top-left": {
        "name": "top-left"
      },
      "middle-left": {
        "name": "middle-left"
      },
      "left": {
        "name": "left",
        "doc": "The same as \"middle-left\""
      },
      "bottom-left": {
        "name": "bottom-left"
      },
      "top-center": {
        "name": "top-center"
      },
      "middle-center": {
        "name": "middle-center"
      },
      "center": {
        "name": "center",
        "doc": "The same as \"middle-center\""
      },
      "bottom-center": {
        "name": "bottom-center"
      },
      "top-right": {
        "name": "top-right"
      },
      "right": {
        "name": "right",
        "doc": "The same as \"middle-right\""
      },
      "bottom-right": {
        "name": "bottom-right"
      }
    },
    "type": "union"
  },
  "EventData": {
    "name": "EventData",
    "doc": "Information about the event that has been raised. The table can also contain other fields depending on the type of event. See the list of Factorio events for more information on these.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "defines.events",
        "doc": "The identifier of the event this handler was registered to."
      },
      "tick": {
        "name": "tick",
        "type": "uint",
        "doc": "The tick during which the event happened."
      },
      "mod_name": {
        "name": "mod_name",
        "type": "string",
        "doc": "The name of the mod that raised the event if it was raised using LuaBootstrap::raise_event."
      }
    },
    "type": "table"
  },
  "NthTickEventData": {
    "name": "NthTickEventData",
    "doc": "The tick during which the event happened.",
    "attrs": {
      "tick": {
        "name": "tick",
        "type": "uint",
        "doc": "The tick during which the event happened."
      },
      "nth_tick": {
        "name": "nth_tick",
        "type": "uint",
        "doc": "The nth tick this handler was registered to."
      }
    },
    "type": "table"
  },
  "ModChangeData": {
    "name": "ModChangeData",
    "doc": "Old version of the mod. May be nil if the mod wasn't previously present (i.e. it was just added).",
    "attrs": {
      "old_version": {
        "name": "old_version",
        "type": "string",
        "doc": "Old version of the mod. May be nil if the mod wasn't previously present (i.e. it was just added)."
      },
      "new_version": {
        "name": "new_version",
        "type": "string",
        "doc": "New version of the mod. May be nil if the mod is no longer present (i.e. it was just removed)."
      }
    },
    "type": "table"
  },
  "ConfigurationChangedData": {
    "name": "ConfigurationChangedData",
    "doc": "Old version of the map. Present only when loading map version other than the current version.",
    "attrs": {
      "old_version": {
        "name": "old_version",
        "type": "string",
        "doc": "Old version of the map. Present only when loading map version other than the current version."
      },
      "new_version": {
        "name": "new_version",
        "type": "string",
        "doc": "New version of the map. Present only when loading map version other than the current version."
      },
      "mod_changes": {
        "name": "mod_changes",
        "type": "dictionary[string → ModChangeData]",
        "doc": "Dictionary of mod changes. It is indexed by mod name."
      },
      "mod_startup_settings_changed": {
        "name": "mod_startup_settings_changed",
        "type": "boolean",
        "doc": "true when mod startup settings have changed since the last time this save was loaded."
      },
      "migration_applied": {
        "name": "migration_applied",
        "type": "boolean",
        "doc": "true when mod prototype migrations have been applied since the last time this save was loaded."
      }
    },
    "type": "table"
  },
  "CustomCommandData": {
    "name": "CustomCommandData",
    "doc": "The name of the command.",
    "attrs": {
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The name of the command."
      },
      "tick": {
        "name": "tick",
        "type": "uint",
        "doc": "The tick the command was used in."
      },
      "player_index": {
        "name": "player_index",
        "type": "uint",
        "doc": "The player who issued the command, or nil if it was issued from the server console."
      },
      "parameter": {
        "name": "parameter",
        "type": "string",
        "doc": "The parameter passed after the command, if there is one."
      }
    },
    "type": "table"
  },
  "SelectedPrototypeData": {
    "name": "SelectedPrototypeData",
    "doc": "E.g. \"entity\".",
    "attrs": {
      "base_type": {
        "name": "base_type",
        "type": "string",
        "doc": "E.g. \"entity\"."
      },
      "derived_type": {
        "name": "derived_type",
        "type": "string",
        "doc": "The type of the prototype. E.g. \"tree\"."
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The name of the prototype. E.g. \"tree-05\"."
      }
    },
    "type": "table"
  },
  "ScriptRenderTarget": {
    "name": "ScriptRenderTarget",
    "doc": "",
    "attrs": {
      "entity": {
        "name": "entity",
        "type": "LuaEntity"
      },
      "entity_offset": {
        "name": "entity_offset",
        "type": "Vector"
      },
      "position": {
        "name": "position",
        "type": "MapPosition"
      }
    },
    "type": "table"
  },
  "MouseButtonFlags": {
    "name": "MouseButtonFlags",
    "doc": "A set of flags. Active flags are in the dictionary as true, while inactive flags aren't present at all.",
    "attrs": {
      "left": {
        "name": "left"
      },
      "right": {
        "name": "right"
      },
      "middle": {
        "name": "middle"
      },
      "button-4": {
        "name": "button-4"
      },
      "button-5": {
        "name": "button-5"
      },
      "button-6": {
        "name": "button-6"
      },
      "button-7": {
        "name": "button-7"
      },
      "button-8": {
        "name": "button-8"
      },
      "button-9": {
        "name": "button-9"
      }
    },
    "type": "dictionary[union → true]"
  },
  "ForceCondition": {
    "name": "ForceCondition",
    "doc": "",
    "attrs": {
      "all": {
        "name": "all",
        "doc": "All forces pass."
      },
      "enemy": {
        "name": "enemy",
        "doc": "Forces which will attack pass."
      },
      "ally": {
        "name": "ally",
        "doc": "Forces which won't attack pass."
      },
      "friend": {
        "name": "friend",
        "doc": "Forces which are friends pass."
      },
      "not-friend": {
        "name": "not-friend",
        "doc": "Forces which are not friends pass."
      },
      "same": {
        "name": "same",
        "doc": "The same force pass."
      },
      "not-same": {
        "name": "not-same",
        "doc": "The non-same forces pass."
      }
    },
    "type": "union"
  },
  "RenderLayer": {
    "name": "RenderLayer",
    "doc": "A number between 0 and 255 inclusive, represented by one of the following named strings or the string version of the number. For example \"27\" and \"decals\" are both valid. Higher values are rendered above lower values.",
    "attrs": {
      "string": {
        "name": "string",
        "doc": "A string of a number"
      },
      "water-tile": {
        "name": "water-tile",
        "doc": "15"
      },
      "ground-tile": {
        "name": "ground-tile",
        "doc": "25"
      },
      "tile-transition": {
        "name": "tile-transition",
        "doc": "26"
      },
      "decals": {
        "name": "decals",
        "doc": "27"
      },
      "lower-radius-visualization": {
        "name": "lower-radius-visualization",
        "doc": "29"
      },
      "radius-visualization": {
        "name": "radius-visualization",
        "doc": "30"
      },
      "transport-belt-integration": {
        "name": "transport-belt-integration",
        "doc": "65"
      },
      "resource": {
        "name": "resource",
        "doc": "66"
      },
      "building-smoke": {
        "name": "building-smoke",
        "doc": "67"
      },
      "decorative": {
        "name": "decorative",
        "doc": "92"
      },
      "ground-patch": {
        "name": "ground-patch",
        "doc": "93"
      },
      "ground-patch-higher": {
        "name": "ground-patch-higher",
        "doc": "94"
      },
      "ground-patch-higher2": {
        "name": "ground-patch-higher2",
        "doc": "95"
      },
      "remnants": {
        "name": "remnants",
        "doc": "112"
      },
      "floor": {
        "name": "floor",
        "doc": "113"
      },
      "transport-belt": {
        "name": "transport-belt",
        "doc": "114"
      },
      "transport-belt-endings": {
        "name": "transport-belt-endings",
        "doc": "115"
      },
      "floor-mechanics-under-corpse": {
        "name": "floor-mechanics-under-corpse",
        "doc": "120"
      },
      "corpse": {
        "name": "corpse",
        "doc": "121"
      },
      "floor-mechanics": {
        "name": "floor-mechanics",
        "doc": "122"
      },
      "item": {
        "name": "item",
        "doc": "123"
      },
      "lower-object": {
        "name": "lower-object",
        "doc": "124"
      },
      "transport-belt-circuit-connector": {
        "name": "transport-belt-circuit-connector",
        "doc": "126"
      },
      "lower-object-above-shadow": {
        "name": "lower-object-above-shadow",
        "doc": "127"
      },
      "object": {
        "name": "object",
        "doc": "129"
      },
      "higher-object-under": {
        "name": "higher-object-under",
        "doc": "131"
      },
      "higher-object-above": {
        "name": "higher-object-above",
        "doc": "132"
      },
      "item-in-inserter-hand": {
        "name": "item-in-inserter-hand",
        "doc": "134"
      },
      "wires": {
        "name": "wires",
        "doc": "135"
      },
      "wires-above": {
        "name": "wires-above",
        "doc": "136"
      },
      "entity-info-icon": {
        "name": "entity-info-icon",
        "doc": "138"
      },
      "entity-info-icon-above": {
        "name": "entity-info-icon-above",
        "doc": "139"
      },
      "explosion": {
        "name": "explosion",
        "doc": "142"
      },
      "projectile": {
        "name": "projectile",
        "doc": "143"
      },
      "smoke": {
        "name": "smoke",
        "doc": "144"
      },
      "air-object": {
        "name": "air-object",
        "doc": "145"
      },
      "air-entity-info-icon": {
        "name": "air-entity-info-icon",
        "doc": "147"
      },
      "light-effect": {
        "name": "light-effect",
        "doc": "148"
      },
      "selection-box": {
        "name": "selection-box",
        "doc": "187"
      },
      "higher-selection-box": {
        "name": "higher-selection-box",
        "doc": "188"
      },
      "collision-selection-box": {
        "name": "collision-selection-box",
        "doc": "189"
      },
      "arrow": {
        "name": "arrow",
        "doc": "190"
      },
      "cursor": {
        "name": "cursor",
        "doc": "210"
      }
    },
    "type": "union"
  },
  "ItemStackLocation": {
    "name": "ItemStackLocation",
    "doc": "",
    "attrs": {
      "inventory": {
        "name": "inventory",
        "type": "defines.inventory"
      },
      "slot": {
        "name": "slot",
        "type": "uint"
      }
    },
    "type": "table"
  },
  "VehicleAutomaticTargetingParameters": {
    "name": "VehicleAutomaticTargetingParameters",
    "doc": "",
    "attrs": {
      "auto_target_without_gunner": {
        "name": "auto_target_without_gunner",
        "type": "boolean"
      },
      "auto_target_with_gunner": {
        "name": "auto_target_with_gunner",
        "type": "boolean"
      }
    },
    "type": "table"
  },
  "SoundType": {
    "name": "SoundType",
    "doc": "Defines which slider in the game's sound settings affects the volume of this sound. Furthermore, some sound types are mixed differently than others, e.g. zoom level effects are applied.",
    "attrs": {
      "game-effect": {
        "name": "game-effect"
      },
      "gui-effect": {
        "name": "gui-effect"
      },
      "ambient": {
        "name": "ambient"
      },
      "environment": {
        "name": "environment"
      },
      "walking": {
        "name": "walking"
      },
      "alert": {
        "name": "alert"
      },
      "wind": {
        "name": "wind"
      }
    },
    "type": "union"
  },
  "GuiElementType": {
    "name": "GuiElementType",
    "doc": "",
    "attrs": {
      "button": {
        "name": "button",
        "doc": "A clickable element. Relevant event: on_gui_click"
      },
      "sprite-button": {
        "name": "sprite-button",
        "doc": "A button that displays a sprite rather than text. Relevant event: on_gui_click"
      },
      "checkbox": {
        "name": "checkbox",
        "doc": "A clickable element with a check mark that can be turned off or on. Relevant event: on_gui_checked_state_changed"
      },
      "flow": {
        "name": "flow",
        "doc": "An invisible container that lays out its children either horizontally or vertically."
      },
      "frame": {
        "name": "frame",
        "doc": "A non-transparent box that contains other elements. It can have a title (set via the caption attribute). Just like a flow, it lays out its children either horizontally or vertically. Relevant event: on_gui_location_changed"
      },
      "label": {
        "name": "label",
        "doc": "A piece of text."
      },
      "line": {
        "name": "line",
        "doc": "A horizontal or vertical separation line."
      },
      "progressbar": {
        "name": "progressbar",
        "doc": "A partially filled bar that can be used to indicate progress."
      },
      "table": {
        "name": "table",
        "doc": "An invisible container that lays out its children in a specific number of columns. The width of each column is determined by the widest element it contains."
      },
      "textfield": {
        "name": "textfield",
        "doc": "A single-line box the user can type into. Relevant events: on_gui_text_changed, on_gui_confirmed"
      },
      "radiobutton": {
        "name": "radiobutton",
        "doc": "An element that is similar to a checkbox, but with a circular appearance. Clicking a selected radio button will not unselect it. Radio buttons are not linked to each other in any way. Relevant event: on_gui_checked_state_changed"
      },
      "sprite": {
        "name": "sprite",
        "doc": "An element that shows an image."
      },
      "scroll-pane": {
        "name": "scroll-pane",
        "doc": "An invisible element that is similar to a flow, but has the ability to show and use scroll bars."
      },
      "drop-down": {
        "name": "drop-down",
        "doc": "A drop-down containing strings of text. Relevant event: on_gui_selection_state_changed"
      },
      "list-box": {
        "name": "list-box",
        "doc": "A list of strings, only one of which can be selected at a time. Shows a scroll bar if necessary. Relevant event: on_gui_selection_state_changed"
      },
      "camera": {
        "name": "camera",
        "doc": "A camera that shows the game at the given position on the given surface. It can visually track an entity that is set after the element has been created."
      },
      "choose-elem-button": {
        "name": "choose-elem-button",
        "doc": "A button that lets the player pick from a certain kind of prototype, with optional filtering. Relevant event: on_gui_elem_changed"
      },
      "text-box": {
        "name": "text-box",
        "doc": "A multi-line textfield. Relevant event: on_gui_text_changed"
      },
      "slider": {
        "name": "slider",
        "doc": "A horizontal number line which can be used to choose a number. Relevant event: on_gui_value_changed"
      },
      "minimap": {
        "name": "minimap",
        "doc": "A minimap preview, similar to the normal player minimap. It can visually track an entity that is set after the element has been created."
      },
      "entity-preview": {
        "name": "entity-preview",
        "doc": "A preview of an entity. The entity has to be set after the element has been created."
      },
      "empty-widget": {
        "name": "empty-widget",
        "doc": "An empty element that just exists. The root GUI elements screen and relative are empty-widgets."
      },
      "tabbed-pane": {
        "name": "tabbed-pane",
        "doc": "A collection of tabs and their contents. Relevant event: on_gui_selected_tab_changed"
      },
      "tab": {
        "name": "tab",
        "doc": "A tab for use in a tabbed-pane."
      },
      "switch": {
        "name": "switch",
        "doc": "A switch with three possible states. Can have labels attached to either side. Relevant event: on_gui_switch_state_changed"
      }
    },
    "type": "union"
  },
  "GuiArrowType": {
    "name": "GuiArrowType",
    "doc": "Used by GuiArrowSpecification.",
    "attrs": {
      "nowhere": {
        "name": "nowhere",
        "doc": "Will remove the arrow entirely."
      },
      "goal": {
        "name": "goal",
        "doc": "Will point to the current goal."
      },
      "entity_info": {
        "name": "entity_info"
      },
      "active_window": {
        "name": "active_window"
      },
      "entity": {
        "name": "entity"
      },
      "position": {
        "name": "position"
      },
      "crafting_queue": {
        "name": "crafting_queue"
      },
      "item_stack": {
        "name": "item_stack",
        "doc": "Will point to a given item stack in an inventory."
      }
    },
    "type": "union"
  },
  "RollingStockDrawData": {
    "name": "RollingStockDrawData",
    "doc": "",
    "attrs": {
      "position": {
        "name": "position",
        "type": "MapPosition"
      },
      "orientaton": {
        "name": "orientaton",
        "type": "RealOrientation"
      }
    },
    "type": "table"
  },
  "GuiDirection": {
    "name": "GuiDirection",
    "doc": "Direction of a LuaGuiElement's layout.",
    "attrs": {
      "horizontal": {
        "name": "horizontal"
      },
      "vertical": {
        "name": "vertical"
      }
    },
    "type": "union"
  },
  "ScrollPolicy": {
    "name": "ScrollPolicy",
    "doc": "Scroll policy of a scroll pane.",
    "attrs": {
      "never": {
        "name": "never"
      },
      "dont-show-but-allow-scrolling": {
        "name": "dont-show-but-allow-scrolling"
      },
      "always": {
        "name": "always"
      },
      "auto": {
        "name": "auto"
      },
      "auto-and-reserve-space": {
        "name": "auto-and-reserve-space"
      }
    },
    "type": "union"
  },
  "PrototypeFilter": {
    "name": "PrototypeFilter",
    "doc": "Types \"signal\" and \"item-group\" do not support filters.",
    "attrs": {
      "ItemPrototypeFilter": {
        "name": "ItemPrototypeFilter",
        "doc": "for type \"item\""
      },
      "TilePrototypeFilter": {
        "name": "TilePrototypeFilter",
        "doc": "for type \"tile\""
      },
      "EntityPrototypeFilter": {
        "name": "EntityPrototypeFilter",
        "doc": "for type \"entity\""
      },
      "FluidPrototypeFilter": {
        "name": "FluidPrototypeFilter",
        "doc": "for type \"fluid\""
      },
      "RecipePrototypeFilter": {
        "name": "RecipePrototypeFilter",
        "doc": "for type \"recipe\""
      },
      "DecorativePrototypeFilter": {
        "name": "DecorativePrototypeFilter",
        "doc": "for type \"decorative\""
      },
      "AchievementPrototypeFilter": {
        "name": "AchievementPrototypeFilter",
        "doc": "for type \"achievement\""
      },
      "EquipmentPrototypeFilter": {
        "name": "EquipmentPrototypeFilter",
        "doc": "for type \"equipment\""
      },
      "TechnologyPrototypeFilter": {
        "name": "TechnologyPrototypeFilter",
        "doc": "for type \"technology\""
      }
    },
    "type": "array[union]"
  },
  "ItemPrototypeFilter": {
    "name": "ItemPrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"tool\", \"mergeable\", \"item-with-inventory\", \"selection-tool\", \"item-with-label\", \"has-rocket-launch-products\", \"fuel\", \"place-result\", \"burnt-result\", \"place-as-tile\", \"placed-as-equipment-result\", \"name\", \"type\", \"flag\", \"subgroup\", \"fuel-category\", \"stack-size\", \"default-request-amount\", \"wire-count\", \"fuel-value\", \"fuel-acceleration-multiplier\", \"fuel-top-speed-multiplier\", \"fuel-emissions-multiplier\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "elem_filters": {
        "name": "elem_filters",
        "type": "array[EquipmentPrototypeFilter]",
        "doc": "Filters for the placed equipment."
      },
      "name": {
        "name": "name",
        "type": "string or array[string]",
        "doc": "The prototype name, or list of acceptable names."
      },
      "type": {
        "name": "type",
        "type": "string or array[string]",
        "doc": "The prototype type, or a list of acceptable types."
      },
      "flag": {
        "name": "flag",
        "type": "ItemPrototypeFlag"
      },
      "subgroup": {
        "name": "subgroup",
        "type": "string",
        "doc": "A LuaGroup (subgroup) name"
      },
      "fuel-category": {
        "name": "fuel-category",
        "type": "string",
        "doc": "A LuaFuelCategoryPrototype name"
      },
      "comparison": {
        "name": "comparison",
        "type": "ComparatorString"
      },
      "value": {
        "name": "value",
        "type": "double",
        "doc": "The value to compare against."
      }
    },
    "type": "table"
  },
  "ModSettingPrototypeFilter": {
    "name": "ModSettingPrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"type\", \"mod\", \"setting-type\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The setting scope type (\"startup\", \"runtime-global\", or \"runtime-per-user\")"
      },
      "mod": {
        "name": "mod",
        "type": "string",
        "doc": "The mod name"
      }
    },
    "type": "table"
  },
  "TechnologyPrototypeFilter": {
    "name": "TechnologyPrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"enabled\", \"hidden\", \"upgrade\", \"visible-when-disabled\", \"has-effects\", \"has-prerequisites\", \"research-unit-ingredient\", \"unlocks-recipe\", \"level\", \"max-level\", \"time\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "ingredient": {
        "name": "ingredient",
        "type": "string",
        "doc": "The research ingredient to check."
      },
      "recipe": {
        "name": "recipe",
        "type": "string",
        "doc": "The recipe to check."
      },
      "comparison": {
        "name": "comparison",
        "type": "ComparatorString"
      },
      "value": {
        "name": "value",
        "type": "uint",
        "doc": "The value to compare against."
      }
    },
    "type": "table"
  },
  "DecorativePrototypeFilter": {
    "name": "DecorativePrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"decal\", \"autoplace\", \"collision-mask\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "mask": {
        "name": "mask",
        "type": "CollisionMask or CollisionMaskWithFlags"
      },
      "mask_mode": {
        "name": "mask_mode",
        "type": "string",
        "doc": "How to filter: \"collides\", \"layers-equals\", \"contains-any\" or \"contains-all\""
      }
    },
    "type": "table"
  },
  "AchievementPrototypeFilter": {
    "name": "AchievementPrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"allowed-without-fight\", \"type\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string or array[string]",
        "doc": "The prototype type, or a list of acceptable types."
      }
    },
    "type": "table"
  },
  "FluidPrototypeFilter": {
    "name": "FluidPrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"hidden\", \"name\", \"subgroup\", \"default-temperature\", \"max-temperature\", \"heat-capacity\", \"fuel-value\", \"emissions-multiplier\", \"gas-temperature\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "name": {
        "name": "name",
        "type": "string or array[string]",
        "doc": "The prototype name, or list of acceptable names."
      },
      "subgroup": {
        "name": "subgroup",
        "type": "string",
        "doc": "A LuaGroup (subgroup) name"
      },
      "comparison": {
        "name": "comparison",
        "type": "ComparatorString"
      },
      "value": {
        "name": "value",
        "type": "double",
        "doc": "The value to compare against."
      }
    },
    "type": "table"
  },
  "EquipmentPrototypeFilter": {
    "name": "EquipmentPrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"item-to-place\", \"type\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string or array[string]",
        "doc": "The prototype type, or a list of acceptable types."
      }
    },
    "type": "table"
  },
  "TilePrototypeFilter": {
    "name": "TilePrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"minable\", \"autoplace\", \"blueprintable\", \"item-to-place\", \"collision-mask\", \"walking-speed-modifier\", \"vehicle-friction-modifier\", \"decorative-removal-probability\", \"emissions\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "mask": {
        "name": "mask",
        "type": "CollisionMask or CollisionMaskWithFlags"
      },
      "mask_mode": {
        "name": "mask_mode",
        "type": "string",
        "doc": "How to filter: \"collides\", \"layers-equals\", \"contains-any\" or \"contains-all\""
      },
      "comparison": {
        "name": "comparison",
        "type": "ComparatorString"
      },
      "value": {
        "name": "value",
        "type": "double",
        "doc": "The value to compare against."
      }
    },
    "type": "table"
  },
  "RecipePrototypeFilter": {
    "name": "RecipePrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"enabled\", \"hidden\", \"hidden-from-flow-stats\", \"hidden-from-player-crafting\", \"allow-as-intermediate\", \"allow-intermediates\", \"allow-decomposition\", \"always-show-made-in\", \"always-show-products\", \"show-amount-in-title\", \"has-ingredients\", \"has-products\", \"has-ingredient-item\", \"has-ingredient-fluid\", \"has-product-item\", \"has-product-fluid\", \"subgroup\", \"category\", \"energy\", \"emissions-multiplier\", \"request-paste-multiplier\", \"overload-multiplier\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "elem_filters": {
        "name": "elem_filters",
        "type": "array[FluidPrototypeFilter]",
        "doc": "Matches if at least 1 product is a fluid that matches these filters."
      },
      "subgroup": {
        "name": "subgroup",
        "type": "string",
        "doc": "A LuaGroup (subgroup) name"
      },
      "category": {
        "name": "category",
        "type": "string",
        "doc": "A LuaRecipeCategoryPrototype name"
      },
      "comparison": {
        "name": "comparison",
        "type": "ComparatorString"
      },
      "value": {
        "name": "value",
        "type": "uint",
        "doc": "The value to compare against."
      }
    },
    "type": "table"
  },
  "EntityPrototypeFilter": {
    "name": "EntityPrototypeFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"flying-robot\", \"robot-with-logistics-interface\", \"rail\", \"ghost\", \"explosion\", \"vehicle\", \"crafting-machine\", \"rolling-stock\", \"turret\", \"transport-belt-connectable\", \"wall-connectable\", \"buildable\", \"placable-in-editor\", \"clonable\", \"selectable\", \"hidden\", \"entity-with-health\", \"building\", \"fast-replaceable\", \"uses-direction\", \"minable\", \"circuit-connectable\", \"autoplace\", \"blueprintable\", \"item-to-place\", \"name\", \"type\", \"collision-mask\", \"flag\", \"build-base-evolution-requirement\", \"selection-priority\", \"emissions\", \"crafting-category\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "name": {
        "name": "name",
        "type": "string or array[string]",
        "doc": "The prototype name, or list of acceptable names."
      },
      "type": {
        "name": "type",
        "type": "string or array[string]",
        "doc": "The prototype type, or a list of acceptable types."
      },
      "mask": {
        "name": "mask",
        "type": "CollisionMask or CollisionMaskWithFlags"
      },
      "mask_mode": {
        "name": "mask_mode",
        "type": "\"collides\" or \"layers-equals\" or \"contains-any\" or \"contains-all\""
      },
      "flag": {
        "name": "flag",
        "type": "EntityPrototypeFlag"
      },
      "comparison": {
        "name": "comparison",
        "type": "ComparatorString"
      },
      "value": {
        "name": "value",
        "type": "double",
        "doc": "The value to compare against."
      },
      "crafting_category": {
        "name": "crafting_category",
        "type": "string",
        "doc": "Matches if the prototype is for a crafting machine with this crafting category."
      }
    },
    "type": "table"
  },
  "EventFilter": {
    "name": "EventFilter",
    "doc": "Used to filter out irrelevant event callbacks in a performant way.",
    "attrs": {
      "LuaEntityClonedEventFilter": {
        "name": "LuaEntityClonedEventFilter"
      },
      "LuaEntityDamagedEventFilter": {
        "name": "LuaEntityDamagedEventFilter"
      },
      "LuaPlayerMinedEntityEventFilter": {
        "name": "LuaPlayerMinedEntityEventFilter"
      },
      "LuaPreRobotMinedEntityEventFilter": {
        "name": "LuaPreRobotMinedEntityEventFilter"
      },
      "LuaRobotBuiltEntityEventFilter": {
        "name": "LuaRobotBuiltEntityEventFilter"
      },
      "LuaPostEntityDiedEventFilter": {
        "name": "LuaPostEntityDiedEventFilter"
      },
      "LuaEntityDiedEventFilter": {
        "name": "LuaEntityDiedEventFilter"
      },
      "LuaScriptRaisedReviveEventFilter": {
        "name": "LuaScriptRaisedReviveEventFilter"
      },
      "LuaPrePlayerMinedEntityEventFilter": {
        "name": "LuaPrePlayerMinedEntityEventFilter"
      },
      "LuaEntityMarkedForDeconstructionEventFilter": {
        "name": "LuaEntityMarkedForDeconstructionEventFilter"
      },
      "LuaPreGhostDeconstructedEventFilter": {
        "name": "LuaPreGhostDeconstructedEventFilter"
      },
      "LuaPreGhostUpgradedEventFilter": {
        "name": "LuaPreGhostUpgradedEventFilter"
      },
      "LuaEntityDeconstructionCancelledEventFilter": {
        "name": "LuaEntityDeconstructionCancelledEventFilter"
      },
      "LuaEntityMarkedForUpgradeEventFilter": {
        "name": "LuaEntityMarkedForUpgradeEventFilter"
      },
      "LuaSectorScannedEventFilter": {
        "name": "LuaSectorScannedEventFilter"
      },
      "LuaRobotMinedEntityEventFilter": {
        "name": "LuaRobotMinedEntityEventFilter"
      },
      "LuaScriptRaisedDestroyEventFilter": {
        "name": "LuaScriptRaisedDestroyEventFilter"
      },
      "LuaUpgradeCancelledEventFilter": {
        "name": "LuaUpgradeCancelledEventFilter"
      },
      "LuaScriptRaisedBuiltEventFilter": {
        "name": "LuaScriptRaisedBuiltEventFilter"
      },
      "LuaPlayerBuiltEntityEventFilter": {
        "name": "LuaPlayerBuiltEntityEventFilter"
      },
      "LuaPlayerRepairedEntityEventFilter": {
        "name": "LuaPlayerRepairedEntityEventFilter"
      }
    },
    "type": "array[union]"
  },
  "LuaScriptRaisedReviveEventFilter": {
    "name": "LuaScriptRaisedReviveEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaEntityDiedEventFilter": {
    "name": "LuaEntityDiedEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaEntityMarkedForDeconstructionEventFilter": {
    "name": "LuaEntityMarkedForDeconstructionEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaPreGhostDeconstructedEventFilter": {
    "name": "LuaPreGhostDeconstructedEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaScriptRaisedDestroyEventFilter": {
    "name": "LuaScriptRaisedDestroyEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaUpgradeCancelledEventFilter": {
    "name": "LuaUpgradeCancelledEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaPlayerRepairedEntityEventFilter": {
    "name": "LuaPlayerRepairedEntityEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaScriptRaisedTeleportedEventFilter": {
    "name": "LuaScriptRaisedTeleportedEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaEntityMarkedForUpgradeEventFilter": {
    "name": "LuaEntityMarkedForUpgradeEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaPostEntityDiedEventFilter": {
    "name": "LuaPostEntityDiedEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. Can only be \"type\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The prototype type"
      }
    },
    "type": "table"
  },
  "LuaPreRobotMinedEntityEventFilter": {
    "name": "LuaPreRobotMinedEntityEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaEntityClonedEventFilter": {
    "name": "LuaEntityClonedEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaScriptRaisedBuiltEventFilter": {
    "name": "LuaScriptRaisedBuiltEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaRobotMinedEntityEventFilter": {
    "name": "LuaRobotMinedEntityEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaPrePlayerMinedEntityEventFilter": {
    "name": "LuaPrePlayerMinedEntityEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaRobotBuiltEntityEventFilter": {
    "name": "LuaRobotBuiltEntityEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\", \"force\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      },
      "force": {
        "name": "force",
        "type": "string",
        "doc": "The entity force"
      }
    },
    "type": "table"
  },
  "LuaPreGhostUpgradedEventFilter": {
    "name": "LuaPreGhostUpgradedEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaEntityDeconstructionCancelledEventFilter": {
    "name": "LuaEntityDeconstructionCancelledEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaPlayerBuiltEntityEventFilter": {
    "name": "LuaPlayerBuiltEntityEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\", \"force\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      },
      "force": {
        "name": "force",
        "type": "string",
        "doc": "The entity force"
      }
    },
    "type": "table"
  },
  "LuaPlayerMinedEntityEventFilter": {
    "name": "LuaPlayerMinedEntityEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  },
  "LuaEntityDamagedEventFilter": {
    "name": "LuaEntityDamagedEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\", \"original-damage-amount\", \"final-damage-amount\", \"damage-type\", \"final-health\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "A LuaDamagePrototype name"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      },
      "comparison": {
        "name": "comparison",
        "type": "ComparatorString"
      },
      "value": {
        "name": "value",
        "type": "float",
        "doc": "The value to compare against."
      }
    },
    "type": "table"
  },
  "LuaSectorScannedEventFilter": {
    "name": "LuaSectorScannedEventFilter",
    "doc": "Depending on the value of filter, the table may take additional fields. filter may be one of the following:",
    "attrs": {
      "filter": {
        "name": "filter",
        "type": "string",
        "doc": "The condition to filter on. One of \"ghost\", \"rail\", \"rail-signal\", \"rolling-stock\", \"robot-with-logistics-interface\", \"vehicle\", \"turret\", \"crafting-machine\", \"wall-connectable\", \"transport-belt-connectable\", \"circuit-network-connectable\", \"type\", \"name\", \"ghost_type\", \"ghost_name\"."
      },
      "mode": {
        "name": "mode",
        "type": "\"or\" or \"and\"",
        "doc": "How to combine this with the previous filter. Defaults to \"or\". When evaluating the filters, \"and\" has higher precedence than \"or\"."
      },
      "invert": {
        "name": "invert",
        "type": "boolean",
        "doc": "Inverts the condition. Default is false."
      },
      "type": {
        "name": "type",
        "type": "string",
        "doc": "The ghost prototype type"
      },
      "name": {
        "name": "name",
        "type": "string",
        "doc": "The ghost prototype name"
      }
    },
    "type": "table"
  }
}